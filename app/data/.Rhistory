t <- edge_attr_names(interlist[[13]])
t <- vertex_attr_names(interlist[[13]])
t
t <- E(interlist[[13]])
t
t[1]
t <- as_ids(t)
View(inter)
component <- rbind(cancer[paste(cancer$m1, cancer$m2, sep = '|') %in% t,], healthy[paste(healthy$m1, healthy$m2, sep = '|') %in% t,])
View(component)
component <- cbind(cancer[paste(cancer$m1, cancer$m2, sep = '|') %in% t,], healthy[paste(healthy$m1, healthy$m2, sep = '|') %in% t,])
table(component$m1_rank)
t <- E(interlist[[2]])
t <- as_ids(t)
component2 <- cbind(cancer[paste(cancer$m1, cancer$m2, sep = '|') %in% t,], healthy[paste(healthy$m1, healthy$m2, sep = '|') %in% t,])
View(component2)
View(interlist)
t <- E(interlist[[1]])
t <- as_ids(t)
component1 <- cbind(cancer[paste(cancer$m1, cancer$m2, sep = '|') %in% t,], healthy[paste(healthy$m1, healthy$m2, sep = '|') %in% t,])
View(component1)
View(interlist)
t <- V(interlist[[13]])
t <- as_ids(t)
t
write_lines(t, 'common.txt')
fd <- file("common.txt")
writeLines(t,fd)
close(fd)
getwd()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
?BiocManager::install
install.packages("C:/Users/HP/Downloads/org.Hs.eg.db_3.16.0.tar.gz", repos = NULL, type = "source")
library(org.Hs.eg.db)
library(clusterProfiler)
install.packages('ggplot2')
install.packages("ggplot2")
library(clusterProfiler)
library(org.Hs.eg.db)
hg <- bitr(t, fromType = "SYMBOL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
?bitr
t <- as.data.frame(t)
View(t)
hg <- bitr(t, fromType = "SYMBOL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
t <- mapIds(org.Hs.eg.db, t$t, "ENTREZID", "SYMBOL")
t <- mapIds(org.Hs.eg.db, t, "ENTREZID", "SYMBOL")
t <- as.character(t)
t <- V(interlist[[13]])
library(igraph)
t <- V(interlist[[13]])
t <- as_ids(t)
install.packages('aliases2entrez')
library(aliases2entrez)
install.packages('limma')
BiocManager::install('limma')
library(aliases2entrez)
hs <- org.Hs.eg.db
my.symbols <- t
select(hs, keys = my.symbols, columns = c("ENTREZID", "SYMBOL"), keytype = "SYMBOL")
tt <- mapIds(org.Hs.eg.db, t, 'ENTREZID', 'SYMBOL')
read.csv('hgnc_complete_set.txt', sep = '\t')
hgnc_set <- read.csv('hgnc_complete_set.txt', sep = '\t')
View(hgnc_set)
library(limma)
tt <- alias2Symbol(t, species = "Hs")
t <- tt
hg <- bitr(t, fromType = "SYMBOL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
View(hg)
go <- enrichGO(hg$ENTREZID, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = 'BH', pvalueCutoff = 0.05, qvalueCutoff = 0.2, keyType = 'ENTREZID')
gc()
dim(go)
barplot(go, showCategory = 20, drop=T)
View(cancer)
t <- cancer[paste0(cancer$m1, cancer$m2) %in% paste0(healthy$m2, healthy$m1),]
paste0(cancer$m1, cancer$m2) %in% paste0(healthy$m2, healthy$m1)
t <- healthy[paste0(healthy$m1, healthy$m2) %in% paste0(cancer$m2, cancer$m1),]
t1 <- paste0(healthy$m1, healthy$m2)
t2 <- paste0(cancer$m2, cancer$m1)
?any
any(t1 %in% t2)
t1 <- paste0(healthy$m2, healthy$m1)
any(t1 %in% t2)
t2 <- paste0(cancer$m1, cancer$m2)
any(t1 %in% t2)
library(readr)
cancer0_95output <- read_csv("C:/Users/HP/source/repos/看看对不对/cancer0.95output.csv")
View(cancer0_95output)
rm(component1)
rm(component2)
gc()
cancer95 <- cancer0_95output
rm(cancer0_95output)
View(cancer95)
t <- paste0(healthy$m1, healthy$m2) %in% paste0(cancer95$m1, cancer95$m2)
inter95 <- healthy[t,]
t <- paste0(healthy$m1, healthy$m2) %in% paste0(cancer95$m2, cancer95$m1)
any(t)
t <- paste0(healthy$m2, healthy$m1) %in% paste0(cancer95$m1, cancer95$m2)
any(t)
t <- paste0(cancer$m2, cancer$m1) %in% paste0(cancer95$m1, cancer95$m2)
any(t)
t <- paste0(cancer95$m1, cancer95$m2) %in% paste0(cancer$m1, cancer$m2)
any(t)
tt <- cancer95[t,]
ttt <- cancer[paste0(cancer$m1, cancer$m2) %in% paste0(cancer95$m1, cancer95$m2), ]
View(tt)
library(readr)
output <- read_csv("C:/Users/HP/source/repos/看看对不对/output.csv")
View(output)
all(paste0(output$m1, output$m2) %in% paste0(cancer$m1, cancer$m2))
rm(output)
gc()
library(readr)
cancer0_9output <- read_csv("C:/Users/HP/source/repos/看看对不对/cancer0.9output.csv")
View(cancer0_9output)
?rename
cancer9 <- cancer0_9output
rm(cancer0_9output)
View(cancer9)
t <- paste0(healthy$m1, healthy$m2) %in% paste0(cancer9$m1, cancer9$m2)
inter <- healthy[t,]
ttt <- cancer[paste0(cancer$m1, cancer$m2) %in% paste0(cancer9$m1, cancer9$m2), ]
View(cancer95)
maybe <- cancer95[cancer95$ratio != 1,]
View(maybe)
emapplot(go)
kegg <- enrichKEGG(hg$ENTREZID, organism = 'hsa', keyType = 'kegg', pvalueCutoff = 0.05, pAdjustMethod = 'BH', minGSSize = 3, maxGSSize = 500, qvalueCutoff = 0.2, use_internal_data = FALSE)
barplot(kegg,showCategory=20,drop=T)
browseKEGG(kegg, "hsa03728")
View(healthy)
maybe9 <- cancer9[cancer9$ratio != 1,]
maybe9 <- cancer9[cancer9$ratio < 0.99,]
maybe9 <- cancer9[cancer9$ratio < 0.98,]
rm(cancer9)
rm(cancer95)
library(readr)
cancer0_95output <- read_csv("C:/Users/HP/source/repos/看看对不对/cancer0.95output.csv")
View(cancer0_95output)
library(readr)
output <- read_csv("C:/Users/HP/source/repos/看看对不对/output.csv")
View(output)
all(output$m1 %in% cancer$m1)
rm(maybe)
rm(maybe9)
rm(cancer0_95output)
rm(output)
gc()
library(BNPmix)
pairs <- c("hsa-miR-6789-5p>hsa-miR-6781-5p", "hsa-miR-5100>hsa-miR-6786-5p", "hsa-miR-1290>hsa-miR-3619-3p", "hsa-miR-5100>hsa-miR-6784-5p", "hsa-miR-5100>hsa-miR-3940-5p", "hsa-miR-221-3p>hsa-miR-6813-3p", "hsa-miR-320b>hsa-miR-4507", "hsa-miR-5100>hsa-miR-1228-5p", "hsa-miR-221-3p>hsa-miR-564", "hsa-miR-221-3p>hsa-miR-7111-3p", "hsa-miR-221-3p>hsa-miR-6831-5p", "hsa-miR-5100>hsa-miR-1908-5p", "hsa-miR-17-3p>hsa-miR-564", "hsa-miR-221-3p>hsa-miR-4716-5p", "hsa-miR-5100>hsa-miR-6729-5p", "hsa-miR-6724-5p>hsa-miR-6765-5p")
a0 <- strsplit(pairs, '>')
View(a0)
a0 <- as.matrix(a0)
View(a0)
a0 <- strsplit(pairs, '>')
View(a0)
a0 <- as.matrix(unlist(a0))
a0
a1 <- unique]
a1 <- unique(a0)
t0 <- a0[c(TRUE, FALSE)]
t1 <- a0[c(FALSE, TRUE)]
t0 <- rbind(t0, t1)
View(t0)
t0 <- as.matrix(t(t0))
colnames(t0) <- c("m1", "m2")
library(readr)
miRWalk_miRNA_Targets <- read_csv("C:/Users/HP/Downloads/miRWalk_miRNA_Targets.csv")
View(miRWalk_miRNA_Targets)
nrow(miRWalk_miRNA_Targets[!is.na(miRWalk_miRNA_Targets$validated),])
a0 <- miRWalk_miRNA_Targets[!is.na(miRWalk_miRNA_Targets$validated),]
View(a0)
t0$m1
t0 <- as.data.frame(t0)
x0 <- unique(a0[a0$mirnaid == t0$m1[1], "genesymbol"])[unique(a0[a0$mirnaid == t0$m1[1], "genesymbol"]) %in% unique(a0[a0$mirnaid == t0$m2[1], "genesymbol"])]
View(x0)
x0
x0 <- unique(a0[a0$mirnaid == t0$m1[1], "genesymbol"])
x0 <- a0[a0$mirnaid == t0$m1[1], "genesymbol"]
View(x0)
x0 <- a0[a0$mirnaid == t0$m1[1],]
x1 <- a0[a0$mirnaid == t0$m2[1],]
View(x1)
x0 <- unique(a0[a0$mirnaid == t0$m1[1], "genesymbol"])[unique(a0[a0$mirnaid == t0$m1[1], "genesymbol"]) %in% unique(a0[a0$mirnaid == t0$m2[1], "genesymbol"])]
x0 <- unique(a0[a0$mirnaid == t0$m1[2], "genesymbol"])[unique(a0[a0$mirnaid == t0$m1[2], "genesymbol"]) %in% unique(a0[a0$mirnaid == t0$m2[2], "genesymbol"])]
View(x0)
x0 <- a0[a0$mirnaid == t0$m1[2],]
View(x0)
x1 <- a0[a0$mirnaid == t0$m2[2],]
View(x1)
x0$genesymbol[x0$genesymbol %in% x1$genesymbol]
res <- list()
for i in nrow(t0):
for (i in nrow(t0)){
x0 <- a0[a0$mirnaid == t0$m1[i],]
x1 <- a0[a0$mirnaid == t0$m2[i],]
res[[i]] <- x0$genesymbol[x0$genesymbol %in% x1$genesymbol]
}
View(res)
for (i in nrow(t0)){
for (i in length(a1)){
res[[i]] <- unique(a0[a0$mirnaid == a1[i],]$genesymbol)}
View(res)
unique(a0[a0$mirnaid == a1[1],]$genesymbol)}
unique(a0[a0$mirnaid == a1[1],]$genesymbol)
res <- list()
for (i in length(a1)){
res[[i]] <- unique(a0[a0$mirnaid == a1[i],]$genesymbol)}
View(res)
unique(a0[a0$mirnaid == a1[2],]$genesymbol)
t2 <- for (i in length(a1)){
unique(a0[a0$mirnaid == a1[i],]$genesymbol)}
length(a1)
for (i in 1:length(a1)){
res[[i]] <- unique(a0[a0$mirnaid == a1[i],]$genesymbol)}
View(res)
names(res) <- a1
res[[a1[2]]]
res2 <- list()
for (i in 1:nrow(t0)) {
genes <- unique(a0$genesymbol)
genes <- unique(a0$genesymbol)
for (i in 1:nrow(10)){
for (i in 1:nrow(t0)){
x0 <- res[[t0$m1[i]]]
x1 <- res[[t0$m2[i]]]
res2[[i]]<-x0[x0 %in% x1]}
View(res2)
View(res2)
View(genes)
genes
write.table(genes, file = 'genes.txt', sep = '\n')
fs <- open('genes.txt')
fs <- file('genes.txt')
writeLines(genes, fs)
close(fs)
getwd()
a0[a0$genesymbol == "SIRT1",]
print(a0[a0$genesymbol == "SIRT1",])
x2 <- a0[a0$genesymbol == "RHOA",]
View(x2)
library(org.Hs.eg.db)
library(clusterProfiler)
hg <- bitr(genes, fromType = "SYMBOL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
View(hg)
length(unique(hg$SYMBOL))
genes[!(genes %in% unique(hg$SYMBOL))]
hg <- rbind(hg, c("RIMOC1", 285636, "ENSG00000205765"))
gocc <- enrichGO(hg$ENTREZID, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'ENTREZID')
gc()
gobp <- enrichGO(hg$ENTREZID, OrgDb = org.Hs.eg.db, ont = "BP", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'ENTREZID')
gomf <- enrichGO(hg$ENTREZID, OrgDb = org.Hs.eg.db, ont = "MF", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'ENTREZID')
barplot(gocc, showCategory = 20, drop=T)
barplot(gobp, showCategory = 20, drop=T)
barplot(gomf, showCategory = 20, drop=T)
go <- enrichGO(hg$ENTREZID, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'ENTREZID')
barplot(go, split="ONTOLOGY")+facet_grid(ONTOLOGY~.,scale="FREE")
library(ggplot2)
barplot(go, split="ONTOLOGY")+facet_grid(ONTOLOGY~.,scale="free")
emapplot(go)
gopt <- pairwise_termsim(go)
library(clusterProfiler)
library(erichplot)
gopt <- pairwise_termsim(go)
library(enrichplot)
gopt <- pairwise_termsim(go)
gc()
emapplot(gopt)
rm(gopt)
gc()
length(unique(a0$mirnaid))
setwd("C:/Users/HP/Downloads")
node_degree <- read.csv('string_node_degrees.tsv', sep = '\t')
View(node_degree)
node_cluster <- read.csv('string_kmeans_clusters.tsv', sep = '\t')
View(node_cluster)
node_degree <- node_degree[node_degree$node_degree != 0,]
k1 <- node_cluster[node_cluster$cluster.number == 1,]
k2 <- node_cluster[node_cluster$cluster.number == 1,]
k3 <- node_cluster[node_cluster$cluster.number == 3,]
k2 <- node_cluster[node_cluster$cluster.number == 2,]
k1 <- k1[k1$protein.name %in% node_degree$X.node,]
k2 <- k2[k2$protein.name %in% node_degree$X.node,]
k3 <- k3[k3$protein.name %in% node_degree$X.node,]
subhg1 <- bitr(k1$protein.name, fromType = "SYMBOL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
subhg1 <- bitr(k2$protein.name, fromType = "SYMBOL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
idx <- vapply(strsplit(node_cluster$protein.identifier, "[.]"), function(x) x[2], character[1])
idx <- vapply(strsplit(node_cluster$protein.identifier, "[.]"), function(x) x[2])
idx <- vapply(strsplit(node_cluster$protein.identifier, "[.]"), function(x) x[2], character(1))
node_cluster$protein.identifier <- idx
k1 <- node_cluster[node_cluster$cluster.number == 1,]
k2 <- node_cluster[node_cluster$cluster.number == 2,]
k3 <- node_cluster[node_cluster$cluster.number == 3,]
k1 <- k1[k1$protein.name %in% node_degree$X.node,]
k2 <- k2[k2$protein.name %in% node_degree$X.node,]
k3 <- k3[k3$protein.name %in% node_degree$X.node,]
View(k1)
gocc <- enrichGO(k1$protein.identifier, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'ENTREZID')
subhg1 <- bitr(k1$protein.identifier, fromType = "ENSEMBL", toType = c("ENTREZID", "ENSEMBL", "SYMBOL"), OrgDb = "org.Hs.eg.db")
gocc <- enrichGO(k1$protein.name, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gc()
gobp <- enrichGO(k1$protein.name, OrgDb = org.Hs.eg.db, ont = "BP", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gomf <- enrichGO(k1$protein.name, OrgDb = org.Hs.eg.db, ont = "MF", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
barplot(gocc, showCategory = 20, drop=T)
setwd("~/")
barplot(gobp, showCategory = 20, drop=T)
barplot(gomf, showCategory = 20, drop=T)
gocc <- enrichGO(k2$protein.name, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gomf <- enrichGO(k2$protein.name, OrgDb = org.Hs.eg.db, ont = "MF", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gobp <- enrichGO(k2$protein.name, OrgDb = org.Hs.eg.db, ont = "BP", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gc()
barplot(gocc, showCategory = 20, drop=T)
View(res2)
barplot(gobp, showCategory = 20, drop=T)
barplot(gomf, showCategory = 20, drop=T)
gocc <- enrichGO(k3$protein.name, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gobp <- enrichGO(k3$protein.name, OrgDb = org.Hs.eg.db, ont = "BP", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gomf <- enrichGO(k3$protein.name, OrgDb = org.Hs.eg.db, ont = "MF", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
barplot(gocc, showCategory = 20, drop=T)
barplot(gobp, showCategory = 20, drop=T)
barplot(gomf, showCategory = 20, drop=T)
View(res2)
View(t0)
m1 <- unique(t0$m1)
m2 <- unique(t0$m2)
View(a0)
m1 <- a0[a0$mirnaid %in% m1,]
m2 <- a0[a0$mirnaid %in% m2,]
m1 <- unique(m1$genesymbol)
m2 <- unique(m2$genesymbol)
gocc <- enrichGO(m1, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gomf <- enrichGO(m1, OrgDb = org.Hs.eg.db, ont = "MF", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gobp <- enrichGO(m1, OrgDb = org.Hs.eg.db, ont = "BP", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
barplot(gocc, showCategory = 20, drop=T)
barplot(gomf, showCategory = 20, drop=T)
barplot(gobp, showCategory = 20, drop=T)
gocc <- enrichGO(m2, OrgDb = org.Hs.eg.db, ont = "CC", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gomf <- enrichGO(m2, OrgDb = org.Hs.eg.db, ont = "MF", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gobp <- enrichGO(m2, OrgDb = org.Hs.eg.db, ont = "BP", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
gc()
barplot(gocc, showCategory = 20, drop=T)
barplot(gomf, showCategory = 20, drop=T)
barplot(gobp, showCategory = 20, drop=T)
go <- enrichGO(m2, OrgDb = org.Hs.eg.db, ont = "ANT", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
go <- enrichGO(m2, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'SYMBOL')
barplot(go, showCategory = 20, drop=T)
View(hg)
length(unique(hg$SYMBOL))
"C5orf51" %in% m1
"C5orf51" %in% m2
m1 <- a0[a0$mirnaid %in% unique(t0$m1),]
m2 <- a0[a0$mirnaid %in% unique(t0$m2),]
m1 <- unique(m1$genesymbol)
m2 <- unique(m2$genesymbol)
m1 <- hg[hg$SYMBOL %in% m1,]
View(m1)
m2 <- hg[hg$SYMBOL %in% m2,]
length(unique(m2$SYMBOL))
View(hg)
m1 <- rbind(m1, c("RIMOC1", 285636, "ENSG00000205765"))
View(m1)
m2 <- rbind(m1, c("RIMOC1", 285636, "ENSG00000205765"))
m2 <- a0[a0$mirnaid %in% unique(t0$m2),]
m2 <- unique(m2$genesymbol)
m2 <- hg[hg$SYMBOL %in% m2,]
m2 <- rbind(m2, c("RIMOC1", 285636, "ENSG00000205765"))
GC()
gc()
go <- enrichGO(m2$ENTREZID, OrgDb = org.Hs.eg.db, ont = "ALL", pAdjustMethod = 'BH', pvalueCutoff = 0.5, qvalueCutoff = 0.2, keyType = 'ENTREZID')
barplot(go, showCategory = 20, drop=T)
barplot(go, split="ONTOLOGY")+facet_grid(ONTOLOGY~.,scale="free")
View(miRWalk_miRNA_Targets)
View(miRWalk_miRNA_Targets)
library(igraph)
a2 <- a0[!duplicated(a0[,c("mirnaid", "genesymbol")]),]
View(a2)
a2 <- a2[,c("mirnaid", "genesymbol")]
colnames(a2) <- c("from", "to")
nodes <- c(unique(a2$from, a2$to))
nodes <- c(unique(a2$from), unique(a2$to))
graph <- graph_from_data_frame(a2, directed = T, vertices = nodes)
layout <- layout.auto(graph)
plot(graph, layout = layout)
plot(graph, layout = layout, vertex.size=5)
plot(graph, layout = layout, vertex.size=5, vertex.label.font=2)
plot(graph, layout = layout.reingold.tilford(graph, circular=T), vertex.size=5, vertex.label.cex=0.8)
plot(graph, layout = layout.reingold.tilford(graph), vertex.size=5, vertex.label.cex=0.8)
plot(graph, layout = layout_with_fr(), vertex.size=5, vertex.label.cex=0.8)
plot(graph, layout = layout_with_fr, vertex.size=5, vertex.label.cex=0.8)
plot(graph, layout = layout_with_fr, vertex.size=5, vertex.label.cex=0.8, edge.arrow.size=0.5, edge.width=1)
plot(graph, layout = layout_with_fr, vertex.size=5, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.width=1)
?head
head(nodes, 22)
head(nodes, 23)
nodes <- as.data.frame(nodes)
nodes$type <- "gene"
View(nodes)
nodes[1:22,"type"] <- "mirna"
graph <- graph_from_data_frame(a2, directed = T, vertices = nodes)
plot(graph, layout = layout_with_fr, vertex.size=5, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.width=1, ifelse(V(graph)$type == "mirna", "green", "yellow"))
plot(graph, layout = layout_with_fr, vertex.size=5, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.width=1, vertex.color = ifelse(V(graph)$type == "mirna", "green", "yellow"))
write.graph(graph, file = "graph.gml", format = "gml")
})
write.graph(graph, file = "graph.gml", format = "gml")
c1 <- c(1,1,4,5,14)
c2 <- 8:12
c3 <- c(-8,19,19,8,10)
df <- as.data.frame(rbind(c1,c2,c3))
View(df)
colnames(df) <- c("va","vb","vc","vv","vd")
rownames(df) <- c("s1", "s2", "s3")
df[2,3] <- NA
write.csv(df, file = "test.csv")
a0 <- c(1:114)
a1 <- c(-19:8)
cor(a0,a1)
cor(a0,a1,method = "pearson")
a0
a1
rm(a1)
a1 <- c(2:115)
cor(a0,a1,method = "pearson")
cor.test(a0, a1, method = "pearson", conf.level = 0.95)
cor.test(a0, a1, method = "pearson", conf.level = 0.95, alternative = "less")
cor.test(a0, a1, method = "pearson", conf.level = 0.95, alternative = "greater")
cor.test(a0, a1, method = "pearson", conf.level = 0.95, alternative = "two.sided")
cor.test(a0, a1, method = "pearson", conf.level = 0.99, alternative = "two.sided")
X <- matrix(rnorm(36000), nrow = 1000)
View(X)
install.packages('NMF-master', repos = NULL, type = 'source')
install.packages('registry')
install.packages("installr")
install.packages('installr')
installr::updateR()
installr::updateR()
getOption('timeout')
options(timeout=3600)
getOption('timeout')
installr::updateR()
update.packages()
install.packages('NMF-master', repos = NULL, type = 'source')
pkgs <- c('registry', 'rngtools', 'stringr', 'digest', 'gridBase', 'colorspace', 'RColorBrewer', 'foreach', 'doParallel', 'ggplot2', 'reshape2', 'Biobase', 'BiocManager')
install.packages(pkgs)
install.packages('NMF-master', repos = NULL, type = 'source')
install.packages('Biobase')
BiocManager::install('Biobase')
install.packages('NMF-master', repos = NULL, type = 'source')
library(NMF)
detach("package:NMF", unload = TRUE)
install.packages('NMF-master', repos = NULL, type = 'source')
library(NMF)
X <- matrix(rnorm(360000), nrow = 1000)
View(X)
res <- nmf(X, 2:4, nrun = 4, .opt = 'vp8')
res <- nmf(X, 2, nrun = 4, .opt = 'vp8')
detach("package:NMF", unload = TRUE)
install.packages('NMF-master', repos = NULL, type = 'source')
library(NMF)
res <- nmf(X, 2, nrun = 4, .opt = 'vp8')
detach("package:NMF", unload = TRUE)
install.packages('NMF-master', repos = NULL, type = 'source')
library(NMF)
res <- nmf(X, 2, nrun = 4, .opt = 'vp8')
library(jsonlite)
load("~/f6rv.RData")
library(ggplot2)
library(ggpubr)
install.packages('ggpubr')
library(ggpubr)
p
??annotation_id()
rlang::last_trace()
source('ggsciext.R')
p
library(ggsci)
p
library(readr)
output <- read_csv("C:/Users/HP/source/repos/GVMDF/app/upload/output.csv")
View(output)
t <- unique(output$varclass)
t
setwd("C:/Users/HP/source/repos/GVMDF/app/data")
IBV <- read.table('IBV.gff', sep = '\t')
View(IBV)
colnames(IBV) <- c('seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'annotation')
IBV[,10] <- IBV[,9]
colnames(IBV)[9:10] <- c('gene', 'annotation')
ibv <- IBV[IBV$type == 'gene',]
View(ibv)
ibv$gene <- c('PB1', 'PB2', 'PA', 'HA', 'NP', 'NB', 'NA', 'M1', 'NEP', 'NS1')
ibv[1,10] <- 'RNA-directed RNA polymerase catalytic subunit'
ibv[2,10] <- 'Polymerase basic protein 2'
ibv[3,10] <- 'Polymerase acidic protein'
ibv[10,10] <- 'Non-structural protein 1'
ibv[9,10] <- 'Nuclear export protein'
ibv[5,10] <- 'Nucleoprotein'
ibv[6,10] <- 'Glycoprotein NB'
ibv[7,10] <- 'Neuraminidase'
ibv[8,10] <- 'Matrix protein 1'
ibv[4,10] <- 'Hemagglutinin'
write.table(ibv[1,], file = 'IBV_1.gff', sep = '\t')
write.table(ibv[2,], file = 'IBV_2.gff', sep = '\t')
write.table(ibv[3,], file = 'IBV_3.gff', sep = '\t')
write.table(ibv[4,], file = 'IBV_4.gff', sep = '\t')
write.table(ibv[5,], file = 'IBV_5.gff', sep = '\t')
write.table(ibv[6:7,], file = 'IBV_6.gff', sep = '\t')
write.table(ibv[8,], file = 'IBV_7.gff', sep = '\t')
write.table(ibv[9:10,], file = 'IBV_8.gff', sep = '\t')
