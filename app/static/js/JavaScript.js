const { createApp, ref, onMounted } = Vue
//const { PDFDocument } = require('pdfkit')
//const { blobStream } = require('blob-stream')

const color = ['#E64B35', '#4DBBD5', '#00A087', '#3C5488', '#F39B7F', '#8491B4', '#91D1C2', '#DC0000', '#7E6148', '#B09C85']
const ext = ['#9A8385', '#73765E', '#91505E', '#EC735A', '#B56E74', '#BC8E7C', '#E1261A', '#B2563E', '#CB745D', '#26AEAE', '#4488AE', '#A0ABAA', '#68A6C4', '#6FC6CC', '#945E6A', '#668E8E', '#7EACAD', '#1E7A88', '#7A9E83', '#42989E', '#48B8A4', '#6E5044', '#3F8068', '#589E86', '#987884', '#60729E', '#6692A5', '#8C2A44', '#5D5A68', '#767886', '#BC969A', '#C2B6A0', '#E84E40', '#B87E64', '#D29C82', '#8AB1BB', '#B0485A', '#81797E', '#9A969C', '#B66861', '#889985', '#A0B6A4', '#AD3024', '#C64E42', '#977E66']

const predataOne = { "columns": ["United Kingdom", "China", "USA", "Spain", "Belgium", "Sweden", "Israel", "Japan", "Netherlands"], "data": [{ "key": "United Kingdom", "density": [[0, 0], [200, 0], [400, 0], [600, 0], [800, 0], [1000, 0.0005492744999313438], [1200, 0.0001121435437359827], [1400, 0.000029752368746281132], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0.00010985489998626876], [2600, 0], [2800, 0], [3000, 0.0001396072687325499], [3200, 0.00010527761248684092], [3400, 0.00010985489998626876], [3600, 0.00010298896873712697], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0.0010985489998626876], [4800, 0.00007552524374055978], [5000, 0.0006064905936741922], [5200, 0], [5400, 0], [5600, 0.00010985489998626876], [5800, 0], [6000, 0], [6200, 0.0001876687874765425], [6400, 0.00015105048748111956], [6600, 0], [6800, 0], [7000, 0], [7200, 0.0002746372499656719], [7400, 0], [7600, 0], [7800, 0.0003021009749622391], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0], [9200, 0], [9400, 0.00009154574998855729], [9600, 0.00029752368746281135], [9800, 0], [10000, 0], [10200, 0], [10400, 0.011381425367327306], [10600, 0], [10800, 0], [11000, 0], [11200, 0], [11400, 0.0001121435437359827], [11600, 0.00010298896873712697], [11800, 0], [12000, 0.00010298896873712697], [12200, 0], [12400, 0], [12600, 0], [12800, 0.00010527761248684092], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0.00007552524374055978], [14600, 0], [14800, 0.00010985489998626876], [15000, 0], [15200, 0], [15400, 0.0006797271936650381], [15600, 0.00016478234997940313], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0], [17600, 0], [17800, 0.0008445095436444412], [18000, 0], [18200, 0.00009154574998855729], [18400, 0.0059779374742527985], [18600, 0.0002815031812148137], [18800, 0], [19000, 0], [19200, 0], [19400, 0.00009154574998855729], [19600, 0.00015791641873026134], [19800, 0.00010985489998626876], [20000, 0.03781297203277358], [20200, 0], [20400, 0.00009154574998855729], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0.00047603789994049795], [21800, 0.00010985489998626876], [22000, 0], [22200, 0.00010985489998626876], [22400, 0.00007552524374055978], [22600, 0.0038311896370211273], [22800, 0.000059504737492562264], [23000, 0.05], [23200, 0.003954776399505679], [23400, 0.00021284386872339573], [23600, 0.00012129811873483842], [23800, 0.01698173662287732], [24000, 0], [24200, 0], [24400, 0.0060969469492379216], [24600, 0], [24800, 0], [25000, 0], [25200, 0], [25400, 0.0003318533437085203], [25600, 0.001354877099830648], [25800, 0.00007552524374055978], [26000, 0.03373232022703349], [26200, 0.005655238705543128], [26400, 0], [26600, 0.00005492744999313438], [26800, 0.03211882638348536], [27000, 0.0010710852748661204], [27200, 0.033503455852062186], [27400, 0.00032498741245937844], [27600, 0.00007552524374055978], [27800, 0.00005492744999313438], [28000, 0.00018538014372682855], [28200, 0.003906714880761685], [28400, 0], [28600, 0.0011626310248546777], [28800, 0.0002746372499656719], [29000, 0], [29200, 0.0005355426374330602], [29400, 0], [29600, 0.00005492744999313438], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "China", "density": [[0, 0], [200, 0.00037945125510799766], [400, 0.0038820782253356674], [600, 0.009632224168126093], [800, 0.002714535901926444], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0.00037945125510799766], [2800, 0], [3000, 0.0034734384121424392], [3200, 0], [3400, 0.005458260361938119], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0.0014302393461762984], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0.000700525394045534], [8000, 0], [8200, 0.00037945125510799766], [8400, 0], [8600, 0], [8800, 0.001401050788091068], [9000, 0], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0.0046409807355516615], [10200, 0.007413893753648568], [10400, 0.016870986573263275], [10600, 0], [10800, 0], [11000, 0.000700525394045534], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0.001313485113835376], [12200, 0], [12400, 0], [12600, 0], [12800, 0.01004086398131932], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0.01835960303561003], [14600, 0], [14800, 0], [15000, 0], [15200, 0.001401050788091068], [15400, 0.0011675423234092232], [15600, 0.005604203152364272], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0.0009632224168126093], [17000, 0], [17200, 0], [17400, 0.0141272621132516], [17600, 0], [17800, 0.000700525394045534], [18000, 0], [18200, 0], [18400, 0.002364273204903677], [18600, 0], [18800, 0.000700525394045534], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0.007968476357267948], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0.0009632224168126093], [21200, 0], [21400, 0], [21600, 0.0105954465849387], [21800, 0], [22000, 0.01009924109748978], [22200, 0.03047285464098073], [22400, 0.00037945125510799766], [22600, 0.025948628137769988], [22800, 0.021132516053706942], [23000, 0.049999999999999996], [23200, 0.010507880910683007], [23400, 0.017746643315820192], [23600, 0.030297723292469346], [23800, 0.00861062463514302], [24000, 0], [24200, 0], [24400, 0.007005253940455339], [24600, 0], [24800, 0], [25000, 0.013689433741973142], [25200, 0.01754232340922358], [25400, 0], [25600, 0], [25800, 0], [26000, 0.0017805020431990654], [26200, 0.01103327495621716], [26400, 0], [26600, 0.014331582019848216], [26800, 0.009019264448336249], [27000, 0], [27200, 0.002626970227670752], [27400, 0], [27600, 0.000700525394045534], [27800, 0.028021015761821363], [28000, 0], [28200, 0.018330414477524804], [28400, 0], [28600, 0], [28800, 0], [29000, 0], [29200, 0.001313485113835376], [29400, 0.004670169293636893], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "USA", "density": [[0, 0], [200, 0.002549019607843138], [400, 0.0029411764705882353], [600, 0], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0.003137254901960784], [1800, 0], [2000, 0], [2200, 0], [2400, 0.003137254901960784], [2600, 0], [2800, 0], [3000, 0.010784313725490198], [3200, 0], [3400, 0], [3600, 0], [3800, 0.001568627450980392], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0.00261437908496732], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0.005555555555555555], [8000, 0.0021568627450980395], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0.005098039215686276], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0.010784313725490198], [10200, 0], [10400, 0.026274509803921563], [10600, 0], [10800, 0], [11000, 0.00849673202614379], [11200, 0.008823529411764707], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0.0008496732026143793], [12400, 0.004313725490196079], [12600, 0], [12800, 0], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0.00849673202614379], [18600, 0], [18800, 0.006405228758169935], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0.012352941176470586], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0.0029411764705882353], [21800, 0], [22000, 0.03169934640522875], [22200, 0.013986928104575164], [22400, 0.0008496732026143793], [22600, 0.05], [22800, 0.014836601307189543], [23000, 0.02725490196078431], [23200, 0.004771241830065359], [23400, 0], [23600, 0], [23800, 0], [24000, 0.004313725490196079], [24200, 0], [24400, 0.0008496732026143793], [24600, 0], [24800, 0.0032026143790849673], [25000, 0], [25200, 0], [25400, 0.0021568627450980395], [25600, 0], [25800, 0], [26000, 0], [26200, 0], [26400, 0.0396078431372549], [26600, 0.02601307189542483], [26800, 0.016013071895424835], [27000, 0], [27200, 0], [27400, 0.0032026143790849673], [27600, 0], [27800, 0.009411764705882352], [28000, 0], [28200, 0.0008496732026143793], [28400, 0], [28600, 0], [28800, 0], [29000, 0.0021568627450980395], [29200, 0], [29400, 0.0021568627450980395], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "Spain", "density": [[0, 0], [200, 0.017266187050359705], [400, 0], [600, 0], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0], [2800, 0], [3000, 0.008633093525179852], [3200, 0], [3400, 0], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0.015422661870503588], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0], [10200, 0], [10400, 0.011465827338129488], [10600, 0], [10800, 0], [11000, 0.015422661870503588], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0], [12400, 0], [12600, 0], [12800, 0], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0], [18600, 0], [18800, 0], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0.007643884892086328], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0.049999999999999996], [21800, 0], [22000, 0.00755395683453237], [22200, 0], [22400, 0], [22600, 0.004226618705035969], [22800, 0], [23000, 0.012410071942446038], [23200, 0.0031025179856115095], [23400, 0], [23600, 0], [23800, 0.008003597122302154], [24000, 0], [24200, 0], [24400, 0.0014838129496402873], [24600, 0], [24800, 0], [25000, 0], [25200, 0], [25400, 0], [25600, 0], [25800, 0], [26000, 0.0017985611510791357], [26200, 0.004541366906474818], [26400, 0], [26600, 0], [26800, 0.00849820143884892], [27000, 0], [27200, 0.002607913669064747], [27400, 0], [27600, 0.0010791366906474816], [27800, 0], [28000, 0], [28200, 0.002023381294964028], [28400, 0], [28600, 0], [28800, 0.0027428057553956823], [29000, 0], [29200, 0], [29400, 0], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "Belgium", "density": [[0, 0], [200, 0], [400, 0], [600, 0.04081632653061224], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0], [2800, 0], [3000, 0], [3200, 0], [3400, 0], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0], [10200, 0], [10400, 0], [10600, 0], [10800, 0], [11000, 0], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0], [12400, 0], [12600, 0], [12800, 0.045918367346938785], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0.011224489795918368], [17000, 0], [17200, 0], [17400, 0], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0], [18600, 0], [18800, 0], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0], [21800, 0], [22000, 0], [22200, 0.022448979591836737], [22400, 0], [22600, 0.047959183673469394], [22800, 0.049999999999999996], [23000, 0], [23200, 0], [23400, 0], [23600, 0], [23800, 0], [24000, 0], [24200, 0], [24400, 0], [24600, 0], [24800, 0], [25000, 0], [25200, 0], [25400, 0], [25600, 0], [25800, 0], [26000, 0], [26200, 0], [26400, 0], [26600, 0], [26800, 0], [27000, 0], [27200, 0], [27400, 0], [27600, 0], [27800, 0], [28000, 0], [28200, 0.0163265306122449], [28400, 0], [28600, 0], [28800, 0], [29000, 0], [29200, 0], [29400, 0.02074829931972789], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "Sweden", "density": [[0, 0], [200, 0.014331210191082805], [400, 0], [600, 0], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0], [2800, 0], [3000, 0.021974522292993633], [3200, 0], [3400, 0], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0.012738853503184714], [10200, 0.0041401273885350335], [10400, 0], [10600, 0], [10800, 0], [11000, 0], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0], [12400, 0], [12600, 0], [12800, 0], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0.010509554140127391], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0.012738853503184714], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0.0041401273885350335], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0], [18600, 0], [18800, 0], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0], [21800, 0], [22000, 0], [22200, 0.021019108280254783], [22400, 0], [22600, 0.010509554140127391], [22800, 0], [23000, 0.05], [23200, 0], [23400, 0.015286624203821658], [23600, 0.023248407643312107], [23800, 0.01942675159235669], [24000, 0], [24200, 0], [24400, 0], [24600, 0], [24800, 0], [25000, 0.010509554140127391], [25200, 0.02707006369426752], [25400, 0], [25600, 0], [25800, 0], [26000, 0.015605095541401276], [26200, 0], [26400, 0], [26600, 0.0041401273885350335], [26800, 0.021974522292993633], [27000, 0], [27200, 0.01942675159235669], [27400, 0], [27600, 0], [27800, 0.01687898089171975], [28000, 0], [28200, 0.015286624203821658], [28400, 0], [28600, 0], [28800, 0.014331210191082805], [29000, 0], [29200, 0], [29400, 0], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "Israel", "density": [[0, 0], [200, 0], [400, 0], [600, 0], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0], [2800, 0], [3000, 0], [3200, 0], [3400, 0.004642857142857144], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0], [9200, 0], [9400, 0.021428571428571425], [9600, 0], [9800, 0], [10000, 0.011785714285714287], [10200, 0], [10400, 0], [10600, 0], [10800, 0], [11000, 0], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0], [12400, 0], [12600, 0], [12800, 0], [13000, 0], [13200, 0.008571428571428572], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0], [18600, 0], [18800, 0], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0.05], [21800, 0.008749999999999999], [22000, 0.004642857142857144], [22200, 0.002321428571428572], [22400, 0], [22600, 0], [22800, 0.004285714285714286], [23000, 0], [23200, 0], [23400, 0], [23600, 0], [23800, 0.008035714285714285], [24000, 0], [24200, 0], [24400, 0], [24600, 0], [24800, 0], [25000, 0], [25200, 0], [25400, 0], [25600, 0], [25800, 0], [26000, 0], [26200, 0], [26400, 0], [26600, 0], [26800, 0], [27000, 0], [27200, 0], [27400, 0], [27600, 0], [27800, 0], [28000, 0], [28200, 0], [28400, 0], [28600, 0], [28800, 0.008035714285714285], [29000, 0], [29200, 0], [29400, 0], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "Japan", "density": [[0, 0], [200, 0], [400, 0], [600, 0], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0], [2800, 0], [3000, 0], [3200, 0], [3400, 0], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0], [10200, 0.034375], [10400, 0], [10600, 0], [10800, 0], [11000, 0], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0], [12400, 0], [12600, 0], [12800, 0.034375], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0.041666666666666664], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0.05], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0], [18600, 0], [18800, 0], [19000, 0], [19200, 0], [19400, 0], [19600, 0], [19800, 0], [20000, 0], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0], [21800, 0], [22000, 0], [22200, 0], [22400, 0], [22600, 0], [22800, 0], [23000, 0.046875], [23200, 0.046875], [23400, 0.041666666666666664], [23600, 0], [23800, 0], [24000, 0], [24200, 0], [24400, 0.034375], [24600, 0], [24800, 0], [25000, 0], [25200, 0], [25400, 0], [25600, 0], [25800, 0], [26000, 0], [26200, 0], [26400, 0], [26600, 0], [26800, 0], [27000, 0], [27200, 0], [27400, 0], [27600, 0], [27800, 0], [28000, 0], [28200, 0], [28400, 0], [28600, 0], [28800, 0], [29000, 0], [29200, 0], [29400, 0], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }, { "key": "Netherlands", "density": [[0, 0], [200, 0], [400, 0], [600, 0], [800, 0], [1000, 0], [1200, 0], [1400, 0], [1600, 0], [1800, 0], [2000, 0], [2200, 0], [2400, 0], [2600, 0], [2800, 0], [3000, 0], [3200, 0], [3400, 0], [3600, 0], [3800, 0], [4000, 0], [4200, 0], [4400, 0], [4600, 0], [4800, 0], [5000, 0], [5200, 0], [5400, 0], [5600, 0], [5800, 0], [6000, 0], [6200, 0], [6400, 0], [6600, 0], [6800, 0], [7000, 0], [7200, 0], [7400, 0], [7600, 0], [7800, 0], [8000, 0], [8200, 0], [8400, 0], [8600, 0], [8800, 0], [9000, 0.05], [9200, 0], [9400, 0], [9600, 0], [9800, 0], [10000, 0], [10200, 0], [10400, 0], [10600, 0], [10800, 0], [11000, 0], [11200, 0], [11400, 0], [11600, 0], [11800, 0], [12000, 0], [12200, 0], [12400, 0], [12600, 0], [12800, 0], [13000, 0], [13200, 0], [13400, 0], [13600, 0], [13800, 0], [14000, 0], [14200, 0], [14400, 0], [14600, 0], [14800, 0], [15000, 0], [15200, 0], [15400, 0.04081632653061224], [15600, 0], [15800, 0], [16000, 0], [16200, 0], [16400, 0], [16600, 0], [16800, 0], [17000, 0], [17200, 0], [17400, 0], [17600, 0], [17800, 0], [18000, 0], [18200, 0], [18400, 0], [18600, 0], [18800, 0], [19000, 0], [19200, 0], [19400, 0], [19600, 0.045918367346938785], [19800, 0], [20000, 0], [20200, 0], [20400, 0], [20600, 0], [20800, 0], [21000, 0], [21200, 0], [21400, 0], [21600, 0], [21800, 0], [22000, 0], [22200, 0.013265306122448984], [22400, 0], [22600, 0], [22800, 0], [23000, 0], [23200, 0], [23400, 0], [23600, 0], [23800, 0], [24000, 0], [24200, 0], [24400, 0], [24600, 0], [24800, 0], [25000, 0], [25200, 0], [25400, 0], [25600, 0], [25800, 0], [26000, 0], [26200, 0], [26400, 0], [26600, 0], [26800, 0], [27000, 0], [27200, 0], [27400, 0], [27600, 0], [27800, 0], [28000, 0], [28200, 0], [28400, 0], [28600, 0], [28800, 0], [29000, 0], [29200, 0], [29400, 0], [29600, 0], [29800, 0], [30000, 0], [30200, 0], [30400, 0], [30600, 0], [30800, 0], [31000, 0], [31200, 0], [31400, 0], [31600, 0], [31800, 0], [32000, 0], [32200, 0], [32400, 0], [32600, 0], [32800, 0], [33000, 0], [33200, 0]] }], "genomerange": [0, 33223] };
const predataTwo = { "NucleoEvents": [{ "Mutation": "A20055G", "Occ": 480 }, { "Mutation": "A23403G", "Occ": 480 }, { "Mutation": "A27259C", "Occ": 480 }, { "Mutation": "A28271T", "Occ": 480 }, { "Mutation": "C12880T", "Occ": 480 }, { "Mutation": "C15714T", "Occ": 480 }, { "Mutation": "C19955T", "Occ": 480 }, { "Mutation": "C22674T", "Occ": 480 }, { "Mutation": "C23525T", "Occ": 480 }, { "Mutation": "C25000T", "Occ": 480 }], "MutPerSample": [{ "Count": "68", "Occ": 1 }, { "Count": "93", "Occ": 1 }, { "Count": "95", "Occ": 2 }, { "Count": "97", "Occ": 3 }, { "Count": "99", "Occ": 1 }, { "Count": "101", "Occ": 1 }, { "Count": "103", "Occ": 4 }, { "Count": "104", "Occ": 10 }, { "Count": "105", "Occ": 23 }, { "Count": "106", "Occ": 27 }, { "Count": "107", "Occ": 30 }, { "Count": "108", "Occ": 44 }, { "Count": "109", "Occ": 46 }, { "Count": "110", "Occ": 29 }, { "Count": "111", "Occ": 49 }, { "Count": "112", "Occ": 45 }, { "Count": "113", "Occ": 44 }, { "Count": "114", "Occ": 27 }, { "Count": "115", "Occ": 25 }, { "Count": "116", "Occ": 22 }, { "Count": "117", "Occ": 9 }, { "Count": "118", "Occ": 3 }, { "Count": "119", "Occ": 6 }, { "Count": "120", "Occ": 1 }, { "Count": "121", "Occ": 5 }, { "Count": "122", "Occ": 6 }, { "Count": "123", "Occ": 1 }, { "Count": "125", "Occ": 1 }, { "Count": "127", "Occ": 3 }, { "Count": "128", "Occ": 6 }, { "Count": "130", "Occ": 3 }, { "Count": "131", "Occ": 2 }], "VarClasses": [{ "Varclass": "SNP", "Occ": 38228 }, { "Varclass": "SNP Silent", "Occ": 12060 }, { "Varclass": "Extragenic", "Occ": 1107 }, { "Varclass": "Deletion", "Occ": 813 }, { "Varclass": "Deletion Frameshift", "Occ": 533 }, { "Varclass": "Insertion Frameshift", "Occ": 499 }, { "Varclass": "SNP Stop", "Occ": 51 }, { "Varclass": "Insertion", "Occ": 29 }], "VarType": [{ "Type": "C->T", "Occ": 19018 }, { "Type": "A->G", "Occ": 5646 }, { "Type": "G->A", "Occ": 5483 }, { "Type": "C->A", "Occ": 3351 }, { "Type": "T->C", "Occ": 3179 }, { "Type": "G->T", "Occ": 2757 }, { "Type": "A->C", "Occ": 1955 }, { "Type": "T->G", "Occ": 1937 }, { "Type": "T->A", "Occ": 1909 }, { "Type": "A->T", "Occ": 1494 }], "ProEvents": [{ "Mutation": "M:Q19E", "Occ": 480 }, { "Mutation": "NSP15:T112I", "Occ": 480 }, { "Mutation": "NSP3:G489S", "Occ": 480 }, { "Mutation": "NSP3:T24I", "Occ": 480 }, { "Mutation": "NSP4:T327I", "Occ": 480 }, { "Mutation": "ORF3a:T223I", "Occ": 480 }, { "Mutation": "S:D405N", "Occ": 480 }, { "Mutation": "S:D614G", "Occ": 480 }, { "Mutation": "S:D796Y", "Occ": 480 }, { "Mutation": "S:G446S", "Occ": 480 }] };
const predataThree = { "total": 480, "proteinBar": [{ "Mutation": "T670G", "Occ": 478 }, { "Mutation": "C774T", "Occ": 82 }, { "Mutation": "A405G", "Occ": 33 }, { "Mutation": "C280T", "Occ": 7 }, { "Mutation": "G598A", "Occ": 4 }, { "Mutation": "ATG518.", "Occ": 2 }, { "Mutation": "A496G", "Occ": 1 }, { "Mutation": "AAGTCATTT686.", "Occ": 1 }, { "Mutation": "C313T", "Occ": 1 }, { "Mutation": "C335T", "Occ": 1 }], "proteinCount": { "data": [{ "M_type": "T->G", "Position": 670, "proOcc": 478, "Occ": 2.6794278966121188 }, { "M_type": "C->T", "Position": 774, "proOcc": 82, "Occ": 1.9138138523837167 }, { "M_type": "A->G", "Position": 405, "proOcc": 33, "Occ": 1.5185139398778875 }, { "M_type": "C->T", "Position": 280, "proOcc": 7, "Occ": 0.8450980400142568 }, { "M_type": "G->A", "Position": 598, "proOcc": 4, "Occ": 0.6020599913279624 }, { "M_type": "ATG->.", "Position": 518, "proOcc": 2, "Occ": 0.3010299956639812 }, { "M_type": "A->G", "Position": 496, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 313, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 335, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 364, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 503, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 512, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 583, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 584, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 643, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 683, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 745, "proOcc": 1, "Occ": 0 }, { "M_type": "C->T", "Position": 775, "proOcc": 1, "Occ": 0 }, { "M_type": "G->T", "Position": 315, "proOcc": 1, "Occ": 0 }, { "M_type": "G->T", "Position": 410, "proOcc": 1, "Occ": 0 }, { "M_type": "G->A", "Position": 458, "proOcc": 1, "Occ": 0 }, { "M_type": "G->T", "Position": 488, "proOcc": 1, "Occ": 0 }, { "M_type": "G->T", "Position": 526, "proOcc": 1, "Occ": 0 }, { "M_type": "G->A", "Position": 557, "proOcc": 1, "Occ": 0 }, { "M_type": "G->A", "Position": 599, "proOcc": 1, "Occ": 0 }, { "M_type": "G->T", "Position": 688, "proOcc": 1, "Occ": 0 }, { "M_type": "G->T", "Position": 695, "proOcc": 1, "Occ": 0 }, { "M_type": "T->C", "Position": 326, "proOcc": 1, "Occ": 0 }, { "M_type": "T->C", "Position": 356, "proOcc": 1, "Occ": 0 }, { "M_type": "T->A", "Position": 522, "proOcc": 1, "Occ": 0 }, { "M_type": "T->C", "Position": 559, "proOcc": 1, "Occ": 0 }, { "M_type": "T->A", "Position": 585, "proOcc": 1, "Occ": 0 }], "typeList": ["T->G", "C->T", "A->G", "G->A", "G->T", "T->C", "ATG->.", "T->A"] }, "mutationRate": [{ "Protein": "NSP1", "MutationRate": 1.1777777777777778 }, { "Protein": "NSP2", "MutationRate": 0.35893416927899685 }, { "Protein": "NSP3", "MutationRate": 0.8539845758354756 }, { "Protein": "NSP4", "MutationRate": 1.3553333333333333 }, { "Protein": "NSP5", "MutationRate": 1.6111111111111112 }, { "Protein": "NSP6", "MutationRate": 1.22183908045977 }, { "Protein": "NSP7", "MutationRate": 0.11244979919678715 }, { "Protein": "NSP8", "MutationRate": 0.03367003367003367 }, { "Protein": "NSP9", "MutationRate": 4.247787610619469 }, { "Protein": "NSP10", "MutationRate": 1.1270983213429258 }, { "Protein": "NSP12b", "MutationRate": 0.5843264716504153 }, { "Protein": "NSP13", "MutationRate": 0.3682750970604548 }, { "Protein": "NSP14", "MutationRate": 1.015180265654649 }, { "Protein": "NSP15", "MutationRate": 0.9865125240847784 }, { "Protein": "NSP16", "MutationRate": 0.052572706935123045 }, { "Protein": "S", "MutationRate": 6.672161172161172 }, { "Protein": "ORF3a", "MutationRate": 1.458937198067633 }, { "Protein": "E", "MutationRate": 2.3157894736842106 }, { "Protein": "M", "MutationRate": 4.391629297458894 }, { "Protein": "ORF6", "MutationRate": 5.220430107526882 }, { "Protein": "ORF7a", "MutationRate": 0.2650273224043716 }, { "Protein": "ORF7b", "MutationRate": 6.901515151515151 }, { "Protein": "ORF8", "MutationRate": 0.40710382513661203 }, { "Protein": "N", "MutationRate": 1.6507936507936507 }, { "Protein": "ORF10", "MutationRate": 0.28205128205128205 }] };
const predataFour = { "total": 480, "proEvents": [{ "Mutation": "S135R", "Occ": 478 }, { "Mutation": "T170I", "Occ": 82 }, { "Mutation": "K47R", "Occ": 33 }, { "Mutation": "M85", "Occ": 2 }, { "Mutation": "D144Y", "Occ": 1 }, { "Mutation": "D75Y", "Occ": 1 }, { "Mutation": "E65K", "Occ": 1 }, { "Mutation": "E87D", "Occ": 1 }, { "Mutation": "F31L", "Occ": 1 }, { "Mutation": "G112S", "Occ": 1 }], "proteinProfile": { "data": [{ "pro_variant": "NSP1:S135R", "Position": 670, "proOcc": 478, "Occ": 2.6794278966121188 }, { "pro_variant": "NSP1:T170I", "Position": 774, "proOcc": 82, "Occ": 1.9138138523837167 }, { "pro_variant": "NSP1:K47R", "Position": 405, "proOcc": 33, "Occ": 1.5185139398778875 }, { "pro_variant": "NSP1:M85", "Position": 518, "proOcc": 2, "Occ": 0.3010299956639812 }, { "pro_variant": "NSP1:F31L", "Position": 356, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:G49C", "Position": 410, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:E65K", "Position": 458, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:D75Y", "Position": 488, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:P80S", "Position": 503, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:G82", "Position": 510, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:H83Y", "Position": 512, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:E87D", "Position": 526, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:G98S", "Position": 557, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:L107F", "Position": 584, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:L107H", "Position": 585, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:G112S", "Position": 599, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:L140", "Position": 684, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:K141", "Position": 686, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:K141N", "Position": 688, "proOcc": 1, "Occ": 0 }, { "pro_variant": "NSP1:D144Y", "Position": 695, "proOcc": 1, "Occ": 0 }], "typeList": ["NSP1:S135R", "NSP1:T170I", "NSP1:K47R", "NSP1:M85", "NSP1:D144Y", "NSP1:D75Y", "NSP1:E65K", "NSP1:E87D", "NSP1:F31L", "NSP1:G112S", "NSP1:G49C", "NSP1:G82", "NSP1:G98S", "NSP1:H83Y", "NSP1:K141", "NSP1:K141N", "NSP1:L107F", "NSP1:L107H", "NSP1:L140", "NSP1:P80S"] } };
const predataFive = { "venn": { "data": [{ "sets": ["S:D614G"], "size": 8 }, { "sets": ["28881:GGG->AAC"], "size": 8 }, { "sets": ["S:D614G", "28881:GGG->AAC"], "size": 4 }], "labels": [{ "sets": ["S:D614G"], "label": "S:D614G\n3" }, { "sets": ["28881:GGG->AAC"], "label": "28881:GGG->AAC\n0" }, { "sets": ["S:D614G", "28881:GGG->AAC"], "label": "477" }] }, "upset": { "combinations": [{ "id": 0, "sets": ["S135R"], "samples": ["EPI_ISL_18940804", "EPI_ISL_18940735", "EPI_ISL_18943501", "EPI_ISL_18941400", "EPI_ISL_18941399", "EPI_ISL_18941397", "EPI_ISL_18941395", "EPI_ISL_18941391", "EPI_ISL_18941379", "EPI_ISL_18941378", "EPI_ISL_18941299", "EPI_ISL_18941296", "EPI_ISL_18941295", "EPI_ISL_18941288", "EPI_ISL_18941285", "EPI_ISL_18939212", "EPI_ISL_18939206", "EPI_ISL_18939201", "EPI_ISL_18939197", "EPI_ISL_18939194", "EPI_ISL_18939191", "EPI_ISL_18939190", "EPI_ISL_18939182", "EPI_ISL_18939174", "EPI_ISL_18939170", "EPI_ISL_18936420", "EPI_ISL_18936417", "EPI_ISL_18936415", "EPI_ISL_18936413", "EPI_ISL_18936405", "EPI_ISL_18936398", "EPI_ISL_18936393", "EPI_ISL_18936386", "EPI_ISL_18936375", "EPI_ISL_18936372", "EPI_ISL_18936371", "EPI_ISL_18936370", "EPI_ISL_18936363", "EPI_ISL_18936361", "EPI_ISL_18936360", "EPI_ISL_18936358", "EPI_ISL_18936355", "EPI_ISL_18936354", "EPI_ISL_18933416", "EPI_ISL_18933415", "EPI_ISL_18932677", "EPI_ISL_18932648", "EPI_ISL_18932643", "EPI_ISL_18932636", "EPI_ISL_18932634", "EPI_ISL_18932630", "EPI_ISL_18932622", "EPI_ISL_18932615", "EPI_ISL_18932613", "EPI_ISL_18932596", "EPI_ISL_18932586", "EPI_ISL_18932581", "EPI_ISL_18932577", "EPI_ISL_18932572", "EPI_ISL_18932571", "EPI_ISL_18932567", "EPI_ISL_18932521", "EPI_ISL_18932520", "EPI_ISL_18932517", "EPI_ISL_18932509", "EPI_ISL_18932508", "EPI_ISL_18932504", "EPI_ISL_18932502", "EPI_ISL_18932500", "EPI_ISL_18932476", "EPI_ISL_18932456", "EPI_ISL_18927291", "EPI_ISL_18927290", "EPI_ISL_18926743", "EPI_ISL_18926732", "EPI_ISL_18926721", "EPI_ISL_18926713", "EPI_ISL_18926710", "EPI_ISL_18926700", "EPI_ISL_18926694", "EPI_ISL_18926686", "EPI_ISL_18926683", "EPI_ISL_18926672", "EPI_ISL_18926670", "EPI_ISL_18926658", "EPI_ISL_18926645", "EPI_ISL_18926636", "EPI_ISL_18916829", "EPI_ISL_18916811", "EPI_ISL_18916810", "EPI_ISL_18916809", "EPI_ISL_18916799", "EPI_ISL_18916789", "EPI_ISL_18916152", "EPI_ISL_18916129", "EPI_ISL_18913344", "EPI_ISL_18913339", "EPI_ISL_18913329", "EPI_ISL_18913325", "EPI_ISL_18913324", "EPI_ISL_18913321", "EPI_ISL_18913318", "EPI_ISL_18913311", "EPI_ISL_18913285", "EPI_ISL_18913280", "EPI_ISL_18913278", "EPI_ISL_18913274", "EPI_ISL_18910334", "EPI_ISL_18910333", "EPI_ISL_18910318", "EPI_ISL_18910293", "EPI_ISL_18910292", "EPI_ISL_18910284", "EPI_ISL_18910282", "EPI_ISL_18910275", "EPI_ISL_18910256", "EPI_ISL_18910233", "EPI_ISL_18910226", "EPI_ISL_18910215", "EPI_ISL_18910214", "EPI_ISL_18910206", "EPI_ISL_18910198", "EPI_ISL_18910188", "EPI_ISL_18910182", "EPI_ISL_18909175", "EPI_ISL_18909174", "EPI_ISL_18900942", "EPI_ISL_18900937", "EPI_ISL_18897270", "EPI_ISL_18890685", "EPI_ISL_18890683", "EPI_ISL_18885295", "EPI_ISL_18885294", "EPI_ISL_18885291", "EPI_ISL_18885289", "EPI_ISL_18881712", "EPI_ISL_18881681", "EPI_ISL_18881663", "EPI_ISL_18881658", "EPI_ISL_18881657", "EPI_ISL_18881655", "EPI_ISL_18881650", "EPI_ISL_18881649", "EPI_ISL_18881636", "EPI_ISL_18881589", "EPI_ISL_18881346", "EPI_ISL_18881340", "EPI_ISL_18881324", "EPI_ISL_18881322", "EPI_ISL_18881314", "EPI_ISL_18881307", "EPI_ISL_18881301", "EPI_ISL_18881297", "EPI_ISL_18881291", "EPI_ISL_18881255", "EPI_ISL_18881250", "EPI_ISL_18881247", "EPI_ISL_18881242", "EPI_ISL_18881234", "EPI_ISL_18877953", "EPI_ISL_18936400", "EPI_ISL_18932580", "EPI_ISL_18916132", "EPI_ISL_18881333", "EPI_ISL_18913333", "EPI_ISL_18926646", "EPI_ISL_18936408", "EPI_ISL_18910228", "EPI_ISL_18940718", "EPI_ISL_18916153", "EPI_ISL_18932513", "EPI_ISL_18932594", "EPI_ISL_18932479", "EPI_ISL_18900935", "EPI_ISL_18913290", "EPI_ISL_18941398", "EPI_ISL_18916814", "EPI_ISL_18910224", "EPI_ISL_18936359", "EPI_ISL_18936357", "EPI_ISL_18926724", "EPI_ISL_18936394", "EPI_ISL_18940798", "EPI_ISL_18940799", "EPI_ISL_18916797", "EPI_ISL_18910319", "EPI_ISL_18881323", "EPI_ISL_18910314", "EPI_ISL_18932638", "EPI_ISL_18913277", "EPI_ISL_18910317", "EPI_ISL_18885333", "EPI_ISL_18932606", "EPI_ISL_18913314", "EPI_ISL_18926684", "EPI_ISL_18881631", "EPI_ISL_18913323", "EPI_ISL_18936424", "EPI_ISL_18932519", "EPI_ISL_18910209", "EPI_ISL_18941287", "EPI_ISL_18926717", "EPI_ISL_18881310", "EPI_ISL_18916801", "EPI_ISL_18926704", "EPI_ISL_18926712", "EPI_ISL_18910279", "EPI_ISL_18941305", "EPI_ISL_18910315", "EPI_ISL_18900938", "EPI_ISL_18910313", "EPI_ISL_18936426", "EPI_ISL_18926665", "EPI_ISL_18941392", "EPI_ISL_18936410", "EPI_ISL_18932674", "EPI_ISL_18941301", "EPI_ISL_18939181", "EPI_ISL_18881239", "EPI_ISL_18910183", "EPI_ISL_18890681", "EPI_ISL_18910303", "EPI_ISL_18916134", "EPI_ISL_18926722", "EPI_ISL_18913322", "EPI_ISL_18885290", "EPI_ISL_18910264", "EPI_ISL_18932515", "EPI_ISL_18914569", "EPI_ISL_18926656", "EPI_ISL_18900934", "EPI_ISL_18940756", "EPI_ISL_18926697", "EPI_ISL_18910321", "EPI_ISL_18932682", "EPI_ISL_18890682", "EPI_ISL_18910336", "EPI_ISL_18932585", "EPI_ISL_18936411", "EPI_ISL_18916131", "EPI_ISL_18910180", "EPI_ISL_18913320", "EPI_ISL_18913295", "EPI_ISL_18940803", "EPI_ISL_18913326", "EPI_ISL_18913299", "EPI_ISL_18932625", "EPI_ISL_18936362", "EPI_ISL_18926677", "EPI_ISL_18939207", "EPI_ISL_18913292", "EPI_ISL_18941404", "EPI_ISL_18936427", "EPI_ISL_18941402", "EPI_ISL_18941389", "EPI_ISL_18926650", "EPI_ISL_18913307", "EPI_ISL_18941403", "EPI_ISL_18942167", "EPI_ISL_18941394", "EPI_ISL_18913286", "EPI_ISL_18910329", "EPI_ISL_18910165", "EPI_ISL_18936428", "EPI_ISL_18932448", "EPI_ISL_18932683", "EPI_ISL_18913275", "EPI_ISL_18926647", "EPI_ISL_18926690", "EPI_ISL_18881707", "EPI_ISL_18881584", "EPI_ISL_18926637", "EPI_ISL_18910241", "EPI_ISL_18932684", "EPI_ISL_18939183", "EPI_ISL_18910297", "EPI_ISL_18932450", "EPI_ISL_18932673", "EPI_ISL_18913343", "EPI_ISL_18881330", "EPI_ISL_18937354", "EPI_ISL_18943521", "EPI_ISL_18913316", "EPI_ISL_18926678", "EPI_ISL_18916796", "EPI_ISL_18932484", "EPI_ISL_18910269", "EPI_ISL_18941290", "EPI_ISL_18913282", "EPI_ISL_18910247", "EPI_ISL_18916158", "EPI_ISL_18926685", "EPI_ISL_18937110", "EPI_ISL_18936395", "EPI_ISL_18936356", "EPI_ISL_18941298", "EPI_ISL_18926728", "EPI_ISL_18916795", "EPI_ISL_18932503", "EPI_ISL_18910211", "EPI_ISL_18910298", "EPI_ISL_18910290", "EPI_ISL_18910330", "EPI_ISL_18913301", "EPI_ISL_18910216", "EPI_ISL_18910239", "EPI_ISL_18910205", "EPI_ISL_18890637", "EPI_ISL_18909189", "EPI_ISL_18932598", "EPI_ISL_18910310", "EPI_ISL_18932489", "EPI_ISL_18941306", "EPI_ISL_18915484", "EPI_ISL_18910173", "EPI_ISL_18897269", "EPI_ISL_18932457", "EPI_ISL_18885311", "EPI_ISL_18910331", "EPI_ISL_18936409", "EPI_ISL_18941297", "EPI_ISL_18939215", "EPI_ISL_18936418", "EPI_ISL_18913309", "EPI_ISL_18937355", "EPI_ISL_18926726", "EPI_ISL_18913293", "EPI_ISL_18900933", "EPI_ISL_18941393", "EPI_ISL_18941283", "EPI_ISL_18932541", "EPI_ISL_18915442", "EPI_ISL_18932639", "EPI_ISL_18926691", "EPI_ISL_18910156", "EPI_ISL_18881236", "EPI_ISL_18910252", "EPI_ISL_18932569", "EPI_ISL_18900932", "EPI_ISL_18940802", "EPI_ISL_18926638", "EPI_ISL_18936382", "EPI_ISL_18932647", "EPI_ISL_18881235", "EPI_ISL_18932485", "EPI_ISL_18910243", "EPI_ISL_18932565", "EPI_ISL_18936367", "EPI_ISL_18881328", "EPI_ISL_18926693", "EPI_ISL_18932497", "EPI_ISL_18926662", "EPI_ISL_18926727", "EPI_ISL_18939169", "EPI_ISL_18910325", "EPI_ISL_18913330", "EPI_ISL_18916826"] }, { "id": 1, "sets": ["T170I", "S135R"], "samples": ["EPI_ISL_18940796", "EPI_ISL_18940754", "EPI_ISL_18940751", "EPI_ISL_18940743", "EPI_ISL_18939172", "EPI_ISL_18936425", "EPI_ISL_18936422", "EPI_ISL_18936403", "EPI_ISL_18932525", "EPI_ISL_18932496", "EPI_ISL_18932495", "EPI_ISL_18932486", "EPI_ISL_18932473", "EPI_ISL_18932472", "EPI_ISL_18926692", "EPI_ISL_18926676", "EPI_ISL_18926668", "EPI_ISL_18916802", "EPI_ISL_18913315", "EPI_ISL_18913303", "EPI_ISL_18913297", "EPI_ISL_18913273", "EPI_ISL_18910272", "EPI_ISL_18910267", "EPI_ISL_18910242", "EPI_ISL_18910190", "EPI_ISL_18910175", "EPI_ISL_18910171", "EPI_ISL_18910169", "EPI_ISL_18885272", "EPI_ISL_18916804", "EPI_ISL_18881294", "EPI_ISL_18939209", "EPI_ISL_18916836", "EPI_ISL_18932588", "EPI_ISL_18932564", "EPI_ISL_18916803", "EPI_ISL_18910232", "EPI_ISL_18941390", "EPI_ISL_18940764", "EPI_ISL_18910326", "EPI_ISL_18943525", "EPI_ISL_18910245", "EPI_ISL_18941286", "EPI_ISL_18936376", "EPI_ISL_18936366", "EPI_ISL_18910296", "EPI_ISL_18881659", "EPI_ISL_18910316", "EPI_ISL_18926681", "EPI_ISL_18941284", "EPI_ISL_18932644", "EPI_ISL_18941405", "EPI_ISL_18910174", "EPI_ISL_18932617", "EPI_ISL_18913296", "EPI_ISL_18940763", "EPI_ISL_18932593", "EPI_ISL_18932679", "EPI_ISL_18939171", "EPI_ISL_18932471", "EPI_ISL_18940766", "EPI_ISL_18941294", "EPI_ISL_18936380", "EPI_ISL_18926649", "EPI_ISL_18936419", "EPI_ISL_18932478", "EPI_ISL_18940765", "EPI_ISL_18910231", "EPI_ISL_18932570", "EPI_ISL_18910246", "EPI_ISL_18910248", "EPI_ISL_18926673", "EPI_ISL_18881318", "EPI_ISL_18932685", "EPI_ISL_18932678", "EPI_ISL_18913319", "EPI_ISL_18910178", "EPI_ISL_18936389", "EPI_ISL_18916156", "EPI_ISL_18881648"] }, { "id": 2, "sets": ["K47R", "S135R"], "samples": ["EPI_ISL_18941282", "EPI_ISL_18927292", "EPI_ISL_18927248", "EPI_ISL_18927245", "EPI_ISL_18927244", "EPI_ISL_18926731", "EPI_ISL_18926675", "EPI_ISL_18910308", "EPI_ISL_18910213", "EPI_ISL_18910166", "EPI_ISL_18900939", "EPI_ISL_18885282", "EPI_ISL_18881327", "EPI_ISL_18881233", "EPI_ISL_18913288", "EPI_ISL_18916815", "EPI_ISL_18910327", "EPI_ISL_18932568", "EPI_ISL_18913312", "EPI_ISL_18932681", "EPI_ISL_18941380", "EPI_ISL_18941312", "EPI_ISL_18910337", "EPI_ISL_18909188", "EPI_ISL_18916145", "EPI_ISL_18910210", "EPI_ISL_18916133", "EPI_ISL_18910281", "EPI_ISL_18881335", "EPI_ISL_18910257", "EPI_ISL_18926699", "EPI_ISL_18910274"] }, { "id": 5, "sets": ["M85", "S135R"], "samples": ["EPI_ISL_18897268", "EPI_ISL_18939939"] }, { "id": 3, "sets": ["E87D", "S135R"], "samples": ["EPI_ISL_18932600"] }, { "id": 4, "sets": ["F31L", "T170I", "S135R"], "samples": ["EPI_ISL_18916150"] }, { "id": 6, "sets": ["D75Y", "S135R"], "samples": ["EPI_ISL_18926696"] }, { "id": 7, "sets": ["D144Y", "S135R"], "samples": ["EPI_ISL_18926639"] }, { "id": 8, "sets": ["G112S", "S135R"], "samples": ["EPI_ISL_18910172"] }, { "id": 9, "sets": ["K47R", "E65K", "S135R"], "samples": ["EPI_ISL_18941289"] }], "sets": [{ "setId": "S135R", "size": 478 }, { "setId": "T170I", "size": 82 }, { "setId": "K47R", "size": 33 }, { "setId": "M85", "size": 2 }, { "setId": "D144Y", "size": 1 }, { "setId": "D75Y", "size": 1 }, { "setId": "E65K", "size": 1 }, { "setId": "E87D", "size": 1 }, { "setId": "F31L", "size": 1 }, { "setId": "G112S", "size": 1 }] } };

const svgToPdfExample = (svg) => {
    const doc = new window.PDFDocument();
    const chunks = [];
    const stream = doc.pipe({
        // writable stream implementation
        write: (chunk) => chunks.push(chunk),
        end: () => {
            const pdfBlob = new Blob(chunks, {
                type: "application/octet-stream",
            });
            var blobUrl = URL.createObjectURL(pdfBlob);
            //window.open(`${blobUrl}?customfilename.pdf`);

            /* custom file name download */
            const a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";
            a.href = blobUrl;
            a.download = "test.pdf"; // <---- 👈 file name
            a.click();
            window.URL.revokeObjectURL(url);
        },
        // readable streaaam stub iplementation
        on: (event, action) => { },
        once: (...args) => { },
        emit: (...args) => { },
    });

    window.SVGtoPDF(doc, svg, 0, 0);

    doc.end();
};

function toCSV(obj) {
    var array = [Object.keys(obj[0])].concat(obj)

    return array.map(it => {
        return Object.values(it).toString()
    }).join('\n')
}

function downFile(content, filename, contentType) {
    var elementA = document.createElement('a');
    var file = new Blob([content], { type: contentType });
    elementA.href = URL.createObjectURL(file);
    elementA.download = filename;
    elementA.click();
}

function getColor(value) {
    if (value <= 10) {
        return color.slice(0, value);
    } else {
        var ccopy = color.slice();
        var arr = [];
        while (arr.length < (value - 10)) {
            var r = Math.floor(Math.random() * 45);
            if (arr.indexOf(ext[r]) === -1) arr.push(ext[r]);
        }
        return ccopy.concat(arr);
    }
}

function kernelDensityEstimator(kernel, X) {
    return function (V) {
        return X.map(function (x) {
            return [x, d3.mean(V, function (v) { return kernel(x - v);}) ];
        });
    };
}

function kernelEpanechnikov(k) {
    return function (v) {
        return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;
    };
}

function arrayEqual(narr, oarr) {
    return (narr.length == oarr.length && (narr.every((v, i) => v === oarr[i])))
}

function globalCheck(nreq, oreq) {
    if (oreq == null) {
        return false
    }

    if (nreq.species != oreq.species) {
        return false
    } else if (!arrayEqual(nreq.lineage, oreq.lineage)) {
        return false
    } else if (!arrayEqual(nreq.locate, oreq.locate)) {
        return false
    } else if (!arrayEqual(nreq.date, oreq.date)) {
        return false
    }

    return true
}

function getDensity(data, instance) {
    var result = {}

    var kde = kernelDensityEstimator(kernelEpanechnikov(7), instance.x.ticks(data.genomerange[1] / 300))
    var allDensity = []
    for (let i = 0; i < data.columns.length; i++) {
        let key = data.columns[i]
        let density = kde(data.data.map(function (d) { return d[key]; }))
        let max = (density.reduce((prev, current) => { return (prev && prev[1] > current[1]) ? prev : current }))[1]
        let ratio = 1 / (20 * max);
        for (let j = 0; j < density.length; j++) {
            density[j][1] = density[j][1] * ratio;
        }
        allDensity.push({ key: key, density: density })
    }

    let keylist = []
    allDensity.forEach(function (element) {
        let b = false
        element['density'].forEach(function (element) {
            if (b) {
                return
            }

            if (element.includes(NaN)) {
                b = true
                return
            }
        })

        if (b) {
            keylist.push(element['key'])
            return
        }

        if (element['density'][0][1] != 0.0) {
            element['density'][0][1] = 0.0
        }

        if (element['density'][element['density'].length - 1][1] != 0.0) {
            element['density'][element['density'].length - 1][1] = 0.0
        }
    })

    allDensity = allDensity.filter(item => keylist.indexOf(item['key']) == -1)
    result['keylist'] = keylist
    result['density'] = allDensity
    return result
}

class plotHandler {
    constructor(name, margin, width, height, padding, title, xtitle, ytitle, xname, yname) {
        this.width = width;
        this.height = height;
        this.margin = margin;
        this.padding = padding;
        this.init = false;
        this.name = name;
        this.title = title;
        this.xtitle = xtitle;
        this.tfont = "16px";
        this.txloc = (this.width + this.padding) / 2;
        this.tyloc = this.padding;
        this.xfont = "16px";
        this.xxloc = (this.width + this.padding) / 2;
        this.xyloc = this.height + this.margin.top + 20;
        this.ytitle = ytitle;
        this.yxloc = -(this.height - this.margin.top) / 2;
        this.yyloc = -(this.padding) / 2;
        this.yfont = "16px";
        this.xname = xname;
        this.yname = yname;

        this.x = null;
        this.y = null;
        this.xAxis = null;
        this.yAxis = null;
        this.svg = null;

        this.createX = function () { }
        this.createY = function () { }
        this.initAxis = function () { }
        this.plot = function () { }
    }

    attach() {
        this.svg = d3.select(this.name)
            .append("svg")
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")")

        this.initAxis(this);

        this.init = true;
    }

    detach() {
        this.init = false;
    }

    refreshTitle() {
        this.svg.select("#maintitle").remove()
        this.svg.select("#xtitle").remove()
        this.svg.select("#ytitle").remove()

        this.svg.append("text")
            .attr("id", "maintitle")
            .attr("x", this.txloc)
            .attr("y", this.tyloc)
            .attr("text-anchor", "middle")
            .style("font-size", this.tfont)
            .text(this.title)

        this.svg.append("text")
            .attr("id", "xtitle")
            .attr("text-anchor", "middle")
            .attr("x", this.xxloc)
            .attr("y", this.xyloc)
            .attr("font-size", this.xfont)
            .text(this.xtitle);

        this.svg.append("text")
            .attr("id", "ytitle")
            .attr("text-anchor", "middle")
            .attr("transform", "rotate(-90)")
            .attr("y", this.yyloc)
            .attr("x", this.yxloc)
            .attr("font-size", this.yfont)
            .text(this.ytitle)
    }

    update(nd) {
        if (!this.init) {
            this.attach();
        }

        this.refreshTitle();
        this.createX(this, nd);
        this.createY(this, nd);
        this.plot(this, nd);
    }
}

class plotHandlerFactory {
    constructor(init, crx, cry, plot) {
        this.init = init;
        this.createX = crx;
        this.createY = cry;
        this.plot = plot;
    }

    getPlotHandler(name, margin, width, height, padding, title, xtitle, ytitle, xname, yname) {
        var h = new plotHandler(name, margin, width, height, padding, title, xtitle, ytitle, xname, yname);
        h.initAxis = this.init;
        h.createX = this.createX;
        h.createY = this.createY;
        h.plot = this.plot;

        h.attach()
        return h
    }
}

function barinit(instance) {
    instance.x = d3.scaleBand()
        .range([instance.padding, instance.width])
        .padding(0.2);
    instance.xAxis = instance.svg.append("g")
        .attr("transform", "translate(0," + (instance.height - instance.padding) + ")");
    instance.y = d3.scaleLinear()
        .range([instance.height - instance.padding, instance.padding]);
    instance.yAxis = instance.svg.append("g")
        .attr("class", "myYaxis")
        .attr("transform", "translate(" + instance.padding + ",0)");
}

function barx(instance, data) {
    instance.x.domain(data.map(function (d) { return d[instance.xname]; }))
}

function bary(instance, data) {
    var max = data.reduce((prev, current) => { return (prev && prev[instance.yname] > current[instance.yname]) ? prev : current })
    instance.y.domain([0, max[instance.yname] + (max[instance.yname] * 0.1)]);
}

function barplot(instance, data) {
    if (instance.init) {
        instance.svg.selectAll("rect").remove()
    }

    var u = instance.svg.selectAll("areas")
        .data(data)

    instance.xAxis.call(d3.axisBottom(instance.x))
        .selectAll("text")
        .attr("transform", "translate(-10,0)rotate(-45)")
        .style("text-anchor", "end");
    instance.yAxis.transition().duration(500).call(d3.axisLeft(instance.y));

    u.enter()
        .append("rect")
        .attr("x", function (d) { return instance.x(d[instance.xname]); })
        .attr("y", function (d) { return instance.y(d[instance.yname]); })
        .attr("width", instance.x.bandwidth())
        .attr("height", function (d) { return instance.height - instance.padding - instance.y(d[instance.yname]); })
        .attr("fill", "#00A087")
}

function ridgeinit(instance) {
    instance.x = d3.scaleLinear()
        .domain([0, 30000])
        .range([0, instance.width]);
    instance.xAxis = instance.svg.append("g")
        .attr("transform", "translate(0," + instance.height + ")");
    instance.y = d3.scaleLinear()
        .domain([0, 0.4])
        .range([instance.height, 0]);
}

function ridgex(instance, data) {
    instance.x.domain(data.genomerange)
}

function ridgey(instance, data) {
    data.yName = d3.scaleBand()
        .domain(data.columns)
        .range([0, instance.height])
        .paddingInner(1)

    if (instance.yAxis != null) {
        instance.yAxis.remove()
    }
    instance.yAxis = instance.svg.append("g")
}

function ridgeplot(instance, data) {
    var allDensity = data.data

    var u = instance.svg.selectAll("areas")
        .data(allDensity)

    if (instance.init) {
        instance.svg.selectAll("path").remove()
    }

    instance.xAxis.transition().duration(500).call(d3.axisBottom(instance.x))
    instance.yAxis.call(d3.axisLeft(data.yName));

    u.enter()
    .append("path")
    .attr("transform", function (d) { return ("translate(0," + (data.yName(d.key) - instance.height) + ")") })
    .datum(function (d) { return (d.density) })
    .attr("fill", "#00A087")
    .attr("stroke", "#000")
    .attr("stroke-width", 1)
    .attr("d", d3.line()
        .curve(d3.curveBasis)
        .x(function (d) { return instance.x(d[0]); })
        .y(function (d) { return instance.y(d[1]); })
        )
}

function scatterinit(instance, data) {
    instance.x = d3.scaleLinear()
        .domain([0, 29990])
        .range([0, instance.width - instance.padding])
    instance.xAxis = instance.svg.append("g")
        .attr("transform", "translate(0," + instance.height + ")")
    instance.y = d3.scaleLinear()
        .domain([-0.1, 10000])
        .range([instance.height - instance.padding, instance.padding])
        .nice()
    instance.yAxis = instance.svg.append("g")

    instance.tooltip = d3.select(instance.name)
        .append("div")
        .style("opacity", 0)
        .attr("class", "tooltip")
        .style("background-color", "white")
        .style("border", "solid")
        .style("border-width", "1px")
        .style("border-radius", "5px")
        .style("padding", "10px")
}

function scatterx(instance, data) {
    var xmax = data.data.reduce((prev, current) => { return (prev && prev[instance.xname] > current[instance.xname]) ? prev : current })
    var xmin = data.data.reduce((prev, current) => { return (prev && prev[instance.xname] < current[instance.xname]) ? prev : current })

    instance.x.domain([xmin[instance.xname] - 5, xmax[instance.xname] + 5])
}

function scattery(instance, data) {
    var ymax = data.data.reduce((prev, current) => { return (prev && prev[instance.yname] > current[instance.yname]) ? prev : current })

    instance.y.domain([-0.1, ymax[instance.yname] + (ymax[instance.yname] * 0.1)])
}

function scatterplot(instance, data) {
    instance.svg.select("#plot").remove();
    /*instance.svg.selectAll("#legends").remove();*/

    instance.xAxis.call(d3.axisBottom(instance.x).tickSize(-(instance.height - instance.padding)).ticks(10))
    instance.yAxis.call(d3.axisLeft(instance.y).tickSize(-instance.width + instance.padding).ticks(6))

    var color = d3.scaleOrdinal()
        .domain(data.typeList)
        .range(getColor(data.typeList.length))

    var mouseover = function (d) {
        instance.tooltip.style("opacity", 1)
    }

    var mousemove = function (event, d) {
        let mtype = d[instance.cname]
        let pos = d[instance.xname]
        let ct = d['pro' + instance.yname]

        instance.tooltip.html(mtype + "<br>Position : " + pos + "<br>Count : " + ct)
            .style("position", "absolute")
            .style("left", (event.pageX + 2 - 140) + "px") // It is important to put the +90: other wise the tooltip is exactly where the point is an it creates a weird effect
            .style("top", (event.pageY - 815) + "px")
            .style("color", color(mtype))
    }

    var mouseleave = function (d) {
        instance.tooltip.style("opacity", 0)
    }

    data = data.data

    instance.svg.append('g')
        .attr('id', "plot")
        .selectAll("dot")
        .data(data)
        .enter()
        .append("circle")
        .attr("cx", function (d) { return instance.x(d[instance.xname]); })
        .attr("cy", function (d) { return instance.y(d[instance.yname]); })
        .attr("r", 5)
        .style("fill", function (d) { return color(d[instance.cname]) })
        .on("mouseover", mouseover)
        .on("mousemove", mousemove)
        .on("mouseleave", mouseleave)
}

function stackareainit(instance) {
    instance.x = d3.scaleLinear()
        .domain([0, 29990])
        .range([0, instance.width - instance.padding])
    instance.xAxis = instance.svg.append("g")
        .attr("transform", "translate(0," + instance.height + ")")
    instance.y = d3.scaleLinear()
        .domain([-0.1, 10000])
        .range([instance.height - instance.padding, instance.padding])
        .nice()
    instance.yAxis = instance.svg.append("g")
        .attr("transform", `translate(${instance.margin.left},0)`)
}

function stackareax(instance, data) {
    var xmax = data.data.reduce((prev, current) => { return (prev && prev[instance.xname] > current[instance.xname]) ? prev : current })
    var xmin = data.data.reduce((prev, current) => { return (prev && prev[instance.xname] < current[instance.xname]) ? prev : current })

    instance.x.domain([xmin[instance.xname] - 5, xmax[instance.xname] + 5])
}

function stackareay(instance, data) {
    var ymax = data.data.reduce((prev, current) => { return (prev && prev[instance.yname] > current[instance.yname]) ? prev : current })

    instance.y.domain([0, (ymax[instance.yname] + (ymax[instance.yname] * 0.1))])
}

function stackareaplot(instance, data) {
    instance.svg.select("#plot").remove()

    var series = d3.stack()
        .keys(d3.union(data.data.map(d => d[instance.cname])))
        .value(([, D], key) => {
            if (D.get(key) === undefined) {
                return 0;
            } else {
                return D.get(key)[instance.yname]
            }
        })
        (d3.index(data.data, d => d[instance.xname], d => d[instance.cname]))

    var color = d3.scaleOrdinal()
        .domain(series.map(d => d.key))
        .range(getColor(data.typeList.length))

    data = data.data

    var area = d3.area()
        .x(d => {
            return instance.x(d.data[0]);
        })
        .y0(d => {
            return instance.y(d[0]);
        })
        .y1(d => {
            return instance.y(d[1]);
        });

    instance.xAxis.call(d3.axisBottom(instance.x).tickSizeOuter(0))
    instance.yAxis
        .call(d3.axisLeft(instance.y).ticks(instance.height / 80))
        .call(g => g.select(".domain").remove())
        .call(g => g.selectAll(".tick line").clone()
            .attr("x2", instance.width - instance.margin.left - instance.margin.right)
            .attr("stroke-opacity", 0.1))

    instance.svg.append("g")
        .attr("id", "plot")
        .selectAll()
        .data(series)
        .join("path")
            .attr("fill", d => color(d.key))
            .attr("d", area)
}

function upsetinit(instance) {
    instance.innerMargin = 12;
    instance.tooltipMargin = 10;

    instance.plotWidth = instance.width - instance.margin.left - instance.margin.right;
    instance.plotHeight = instance.height - instance.margin.top - instance.margin.left;

    instance.leftColWidth = 280;
    instance.setIdWidth = 120;
    instance.setSizeChartWidth = instance.leftColWidth - instance.setIdWidth;
    instance.rightColWidth = instance.plotWidth - instance.leftColWidth;

    instance.topRowHeight = 400;
    instance.bottomRowHeight = instance.plotHeight - instance.topRowHeight - instance.innerMargin;

    instance.intersectionSizeScale = d3.scaleLinear()
        .range([instance.topRowHeight, 0]);

    instance.setSizeScale = d3.scaleLinear()
        .range([instance.setSizeChartWidth, 0]);

    instance.x = d3.scaleBand()
        .range([0, instance.rightColWidth])
        .paddingInner(0.2);

    instance.y = d3.scaleBand()
        .range([0, instance.bottomRowHeight])
        .paddingInner(0.2);

    instance.setSizeChart = instance.svg.append('g')
        .attr('transform', `translate(0, ${instance.topRowHeight + instance.innerMargin})`);

    instance.intersectionSizeChart = instance.svg.append('g')
        .attr('class', 'intersection-size')
        .attr('transform', `translate(${instance.leftColWidth}, 0)`);

    instance.combinationMatrix = instance.svg.append('g')
        .attr('transform', `translate(${instance.leftColWidth}, ${instance.topRowHeight + instance.innerMargin})`);

    instance.setSizeAxis = instance.svg.append('g')
        .attr('transform', (d) => `translate(0, ${instance.topRowHeight})`)

    instance.intersectionSizeAxis =  instance.intersectionSizeChart.append('g')
        .attr('transform', (d) => `translate(${-instance.innerMargin},0)`)

    instance.tooltip = d3.select(instance.name)
        .append("div")
        .style("opacity", 0)
        .attr("class", "tooltip")
}

function upsetx(instance, data) {
    instance.intersectionSizeScale
        .domain([0, d3.max(data.combinations, (d) => d.samples.length)]);

    instance.x
        .domain(data.combinations.map((d) => d.id));
}

function upsety(instance, data) {
    instance.setSizeScale
        .domain([0, d3.max(data.sets, (d) => d.size)]);

    instance.y
        .domain(data.sets.map(d => d.setId));
}

function upsetplot(instance, data) {
    let allSetIds = data.sets.map(d => d.setId);

    data.combinations.forEach(combination => {
        combination.set = [];
        allSetIds.forEach(d => {
            combination.set.push({
                "setId": d,
                "member": combination.sets.includes(d)
            });
        });

        if (combination.sets.length > 1) {
            combination.connectorIndices = d3.extent(combination.sets, d => allSetIds.indexOf(d));
        } else {
            combination.connectorIndices = []
        }
    });

    instance.combinationMatrix.selectAll('g').remove()

    let combinationGroup = instance.combinationMatrix.selectAll('.combination')
        .data(data.combinations)
        .join('g')
        .attr('class', 'combination')
        .attr('transform', (d) => `translate(${instance.x(d.id) + instance.x.bandwidth() / 2}, 0)`);

    combinationGroup.selectAll('circle').remove();
    combinationGroup.selectAll('line').remove();

    let circle = combinationGroup.selectAll('circle')
        .data((combination) => combination.set)
        .join('circle')
        .classed('member', (d) => d.member)
        .attr('cy', (d) => instance.y(d.setId) + instance.y.bandwidth() / 2)
        .attr('r', (d) => instance.y.bandwidth() / 4);

    let connector = combinationGroup
        .filter((d) => d.connectorIndices.length > 0)
        .append('line')
        .attr('class', 'connector')
        .attr('y1', (d) => instance.y(allSetIds[d.connectorIndices[0]]) + instance.y.bandwidth() / 2)
        .attr('y2', (d) => instance.y(allSetIds[d.connectorIndices[1]]) + instance.y.bandwidth() / 2)
        .style("stroke-width", (instance.y.bandwidth() / 8) + '');

    instance.setSizeAxis
        .call(d3.axisTop(instance.setSizeScale).ticks(3));

    instance.setSizeChart.selectAll('rect')
        .data(data.sets)
        .join('rect')
        .attr('class', 'bar')
        .attr('width', (d) => instance.setSizeChartWidth - instance.setSizeScale(d.size))
        .attr('height', instance.y.bandwidth())
        .attr("fill", "#00A087")
        .attr('x', (d) => instance.setSizeScale(d.size))
        .attr('y', (d) => instance.y(d.setId));

    instance.setSizeChart.selectAll('.set-name')
        .data(data.sets)
        .join('text')
        .attr('class', 'set-name')
        .attr('text-anchor', 'middle')
        .attr('x', instance.leftColWidth - instance.setIdWidth / 2)
        .attr('y', (d) => instance.y(d.setId) + instance.y.bandwidth() / 2)
        .attr('dy', '0.35em')
        .style('font-size', Math.min(18, (instance.y.bandwidth() * 1.2)) + 'px')
        .text((d) => d.setId);

    instance.intersectionSizeAxis
        .call(d3.axisLeft(instance.intersectionSizeScale).ticks(3));

    instance.intersectionSizeChart.selectAll('text').remove();

    instance.intersectionSizeChart.selectAll('rect')
        .data(data.combinations)
        .join('rect')
        .attr('class', 'bar')
        .attr('height', (d) => instance.topRowHeight - instance.intersectionSizeScale(d.samples.length))
        .attr('width', instance.x.bandwidth())
        .attr("fill", "#00A087")
        .attr('x', (d) => instance.x(d.id))
        .attr('y', (d) => instance.intersectionSizeScale(d.samples.length))

    instance.intersectionSizeChart.selectAll('.text')
        .data(data.combinations)
        .enter()
        .append('text')
        .attr('id', "labels")
        .attr('x', (d) => instance.x(d.id) + instance.x.bandwidth() / 2)
        .attr('y', (d) => instance.intersectionSizeScale(d.samples.length) - 10)
        .attr("dy", ".5em")
        .attr("text-anchor", "middle")
        .style("font-size", Math.min(18, instance.x.bandwidth()) + "px")
        .text(function (d) { return d.samples.length });

    instance.svg.append('text')
        .attr('class', 'axis-title')
        .attr('dy', '0.35em')
        .attr('text-anchor', 'middle')
        .attr('y', instance.topRowHeight - 30)
        .attr('x', instance.setSizeChartWidth / 2)
        .text('Set Size');

    instance.svg.append('text')
        .attr('transform', `translate(${instance.leftColWidth - instance.innerMargin - 30}, ${instance.topRowHeight / 2}) rotate(-90)`)
        .attr('class', 'axis-title')
        .attr('dy', '0.35em')
        .attr('text-anchor', 'middle')
        .text('Intersection Size');
}

function venninit(instance) {
    instance.svg.selectAll('svg').remove();

    instance.chart = venn.VennDiagram();
}

function vennx(instance, data) {

}

function venny(instance, data) {

}

function vennplot(instance, data) {
    this.svg.select("#maintitle").remove()
    this.svg.select("#xtitle").remove()
    this.svg.select("#ytitle").remove()

    d3.select(instance.name).datum(data.data).call(instance.chart)
    let labelDict = {};
    data.labels.forEach((element) => {
        labelDict[element.sets.toString()] = element.label;
    })

    let A = d3.select(instance.name);
    A.selectAll("tspan").remove();
    A.selectAll("text")
        .append("tspan")
        .text(function (d) {
            return labelDict[d.sets.toString()];
        });
}

const app = createApp({
    components: {
        Datepicker: VueDatePicker,
    },

    setup() {
        const segment = ref(false)
        const loading = ref(false)
        const seqCheck = ref(false)
        const geneCheck = ref(false)
        const rangeCheck = ref(false)
        const reRun = ref(false)

        const exitHover = ref(0.5)
        const activatingApp = ref('home')
        const hoverTarget = ref('')
        const buttonLabel = ref('Submit')
        const currentSpecies = ref('SARS-CoV-2')
        const currentSegment = ref(0)
        const currentLineage = ref('')
        const currentLocate = ref('all')
        const currentProtein = ref('')
        const date = ref()
        const mutationText = ref('')
        const genomeLeft = ref(0)
        const genomeRight = ref(0)
        const genomeStr = ref('')
        const genomeMax = ref(0)
        const mtypeNum = ref(8)
        const ptypeNum = ref(20)
        const ctypeNum = ref(10)
        const pcrTemplate = ref("")

        var oldReq = null

        const pnum = ref(16)
        const inum = ref(500)
        const phi1 = ref(2)
        const phi2 = ref(2)
        const primerMaxT = ref(70)
        const primerMinT = ref(50)
        const primerTDiff = ref(5)
        const primerMaxGC = ref(60)
        const primerMinGC = ref(40)
        const primerGCDiff = ref(5)
        const primerMaxP = ref(150)
        const primerMinP = ref(90)
        const primerMaxL = ref(22)
        const primerMinL = ref(18)
        const primerLDiff = ref(5)
        const temparature = ref(37)
        const primerConc = ref(250)
        const naConc = ref(0.05)
        const probeMaxT = ref(65)
        const probeMinT = ref(55)
        const probeMaxGC = ref(60)
        const probeMinGC = ref(40)
        const probeMaxL = ref(22)
        const probeMinL = ref(18)
        const probeConc = ref(250)

        const speciesList = []
        const segmentList = []
        const lineageList = ['all']
        const locateList = ['all', 'Asia', 'Europe', 'North America', 'South America', 'Africa', 'Oceania']
        const proteinList = []
        const assays = ref()

        const chart = {}

        onMounted(() => {
            getSpeciesList()
            getLocateList()

            date.value = [new Date(Date.parse("2024-02-01")), new Date(Date.parse("2024-02-29"))];
        })

        function getSpeciesList() {
            axios.get('http://www.zhanglabtools.online/api/species.json')
                .then(response => {
                    response.data.forEach((element) => {
                        speciesList.push(element.species)
                    })
                    currentSpecies.value = speciesList[0]
                    getSegmentList()
                })
                .catch(function (error) { console.log(error) })
        }

        function getLocateList() {
            axios.get('http://www.zhanglabtools.online/api/country.json')
                .then(response => {
                    response.data.forEach((element) => {
                        locateList.push(element.country)
                    })
                })
                .catch(function (error) { console.log(error) })
        }

        function getSegmentList() {
            axios.post('http://www.zhanglabtools.online/api/ls/', { species: currentSpecies.value })
                .then(response => {
                    if (response.hasOwnProperty('err')) {
                        console.log(response.data.err)
                        return
                    }

                    segmentList.splice(0, segmentList.length)
                    lineageList.splice(1, lineageList.length)
                    if (response.data.segment) {
                        response.data.segmentList.forEach((element) => {
                            segmentList.push(element)
                        })
                        currentSegment.value = segmentList[0];
                    } else { 
                        currentSegment.value = 0;
                    }

                    segment.value = response.data.segment;
                    genomeStr.value = response.data.seglength;
                    segmentChange();

                    response.data.lineageList.forEach((element) => {
                        lineageList.push(element)
                    })
                    currentLineage.value = 'all';

                    getProteinList();
                })
                .catch(function (error) { console.log(error) })
        }

        function getProteinList() {
            axios.post('http://www.zhanglabtools.online/api/proteins/', { species: currentSpecies.value })
                .then(request => {
                    proteinList.splice(0, proteinList.length)

                    request.data.forEach((element) => {
                        proteinList.push(element)
                    })

                    var dlist = ["3'UTR", "5'UTR", "intergenic"];
                    for (var i in dlist) {
                        let idx = proteinList.indexOf(dlist[i])
                        if (idx > -1) {
                            proteinList.splice(idx, 1)
                        }
                    }

                    currentProtein.value = proteinList[0]
                })
        }

        function segmentChange() {
            if (segment.value) {
                let segs = genomeStr.value.split(':');
                var max = parseInt(segs[currentSegment.value - 1]);
            } else {
                var max = parseInt(genomeStr.value)
            }
            genomeMax.value = Math.ceil(max + (max * 0.01));
            genomeRight.value = genomeMax.value
        }

        function clickSubmit() {
            if (activatingApp.value === 'appOne') {
                ridgePlot();
            }

            if (activatingApp.value === 'appTwo') {
                overallBar();
            }

            if (activatingApp.value === 'appThree') {
                singleGene();
            }

            if (activatingApp.value === 'appFour') {
                globalProfile();
            }

            if (activatingApp.value === 'appFive') {
                mutationIntersection();
            }

            if (activatingApp.value === 'appSix') {
                primerDesign();
            }
        }

        function hoverIn(event) {
            hoverTarget.value = event.currentTarget.id;
        }

        function hoverOut() {
            hoverTarget.value = '';
        }

        function exitIn() {
            exitHover.value = 1;
        }

        function exitOut() {
            exitHover.value = 0.5;
        }

        function clickAppCard(event) {
            activatingApp.value = event.currentTarget.id;
            let temp = activatingApp.value;

            if (temp != 'home') {
                if (!(chart.hasOwnProperty(activatingApp.value))) {
                    if (temp == "appOne") {
                        ridgePlot();
                    } else if (temp == "appTwo") {
                        overallBar();
                    } else if (temp == "appThree") {
                        singleGene();
                    } else if (temp == "appFour") {
                        globalProfile();
                    } else if (temp == "appFive") {
                        mutationIntersection();
                    } else if (temp == "appSix") {
                     
                    }
                }
            }
        }

        function clickSideApp(event) {
            if (activatingApp != "home") {
                exitApp();
            }

            if (event.currentTarget.id == "sideA1") {
                activatingApp.value = 'appOne'
            } else if (event.currentTarget.id == "sideA2") {
                activatingApp.value = 'appTwo'
            } else if (event.currentTarget.id == "sideA3") {
                activatingApp.value = 'appThree'
            } else if (event.currentTarget.id == "sideA4") {
                activatingApp.value = 'appFour'
            } else if (event.currentTarget.id == "sideA5") {
                activatingApp.value = 'appFive'
            } else if (event.currentTarget.id == "sideA6") {
                activatingApp.value = 'appSix'
            }

            let temp = activatingApp.value;
            if (temp != 'home') {
                if (!(chart.hasOwnProperty(activatingApp.value))) {
                    if (temp == "appOne") {
                        ridgePlot();
                    } else if (temp == "appTwo") {
                        overallBar();
                    } else if (temp == "appThree") {
                        singleGene();
                    } else if (temp == "appFour") {
                        globalProfile();
                    } else if (temp == "appFive") {
                        mutationIntersection();
                    } else if (temp == "appSix") {

                    }
                }
            }
        }

        function ridgePlot() {
            var title = "",
                xtitle = currentSpecies.value + " Genome Position",
                ytitle = "country";

            if (!chart.hasOwnProperty('appOne')) {
                var margin = { top: 70, right: 40, bottom: 90, left: 120 },
                    width = 1000 - margin.left - margin.right,
                    height = 660 - margin.top - margin.bottom,
                    padding = 60

                let ridgePlotFactory = new plotHandlerFactory(ridgeinit, ridgex, ridgey, ridgeplot)
                chart.appOne = {}
                chart.appOne.a1p1 = ridgePlotFactory.getPlotHandler("#a1p1", margin, width, height, padding, title, xtitle, ytitle, '', '')
                chart.appOne.a1p1.xyloc = chart.appOne.a1p1.xyloc - 40;
                chart.appOne.a1p1.yxloc = chart.appOne.a1p1.yxloc - 40;
                chart.appOne.a1p1.yyloc = chart.appOne.a1p1.yyloc - 30;

                chart.appOne.a1p1.update(predataOne);
            } else {
                var req = {
                    species: currentSpecies.value,
                    segment: currentSegment.value,
                    lineage: [],
                    locate: [],
                    date: [],
                    genomerange: []
                }
                req.lineage.push(currentLineage.value)
                req.locate.push(currentLocate.value)
                req.date.push(date.value[0].toISOString().substring(0, 10))
                req.date.push(date.value[1].toISOString().substring(0, 10))
                req.genomerange.push(genomeLeft.value)
                req.genomerange.push(genomeRight.value)

                loading.value = true
                buttonLabel.value = "Loading"
                axios.post('http://www.zhanglabtools.online/api/ridges/', req)
                    .then(request => {
                        let m = Math.round(parseInt(genomeRight.value) * 0.1);
                        request.data.genomerange = [parseInt(genomeLeft.value), parseInt(genomeRight.value) + m];
                        chart.appOne.a1p1.xtitle = xtitle;

                        chart.appOne.a1p1.createX(chart.appOne.a1p1, request.data)
                        let r = getDensity(request.data, chart.appOne.a1p1)
                        chart.appOne.a1p1.xAxis.transition().duration(500).call(d3.axisBottom(chart.appOne.a1p1.x))
                        request.data.columns = request.data.columns.filter(item => r['keylist'].indexOf(item) == -1)
                        request.data.data = r['density']
                        chart.appOne.a1p1.update(request.data);
                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })
                    .catch(function (error) {
                        console.log(error)
                    })
            }
        }

        function overallBar() {
            if (!chart.hasOwnProperty('appTwo')) {
                var margin = { top: 30, right: 30, bottom: 70, left: 10 },
                    width = 520 - margin.left - margin.right,
                    height = 400 - margin.top - margin.bottom,
                    padding = 40

                let barPlotFactory = new plotHandlerFactory(barinit, barx, bary, barplot);

                chart.appTwo = {};
                var title = "Overall mutations per sample",
                    xtitle = "number of mutations",
                    ytitle = "";
                chart.appTwo.p1 = barPlotFactory.getPlotHandler('#a2p1', margin, width, height, padding, title, xtitle, ytitle, 'Count', 'Occ');

                margin.left = 60
                width = 470 - margin.left - margin.right,
                    title = "Most frequent events per class";
                xtitle = "mutation classes";
                ytitle = "number of events";
                chart.appTwo.p2 = barPlotFactory.getPlotHandler('#a2p2', margin, width, height, padding, title, xtitle, ytitle, 'Varclass', 'Occ');

                title = "Most frequent events per mutation types";
                xtitle = "mutation types";
                ytitle = "number of events";
                chart.appTwo.p3 = barPlotFactory.getPlotHandler('#a2p3', margin, width, height, padding, title, xtitle, ytitle, 'Type', 'Occ');

                title = "Most frequent events (nucleotides)";
                xtitle = "";
                ytitle = "number of samples";
                chart.appTwo.p4 = barPlotFactory.getPlotHandler('#a2p4', margin, width, height, padding, title, xtitle, ytitle, 'Mutation', 'Occ');

                title = "Most frequent events (proteins)";
                xtitle = "";
                ytitle = "number of samples";
                chart.appTwo.p5 = barPlotFactory.getPlotHandler('#a2p5', margin, width, height, padding, title, xtitle, ytitle, 'Mutation', 'Occ');

                chart.appTwo.p1.xyloc = chart.appTwo.p1.xyloc - 40;
                chart.appTwo.p3.xyloc = chart.appTwo.p3.xyloc - 40;

                chart.appTwo.p1.update(predataTwo.MutPerSample);
                chart.appTwo.p2.update(predataTwo.VarClasses);
                chart.appTwo.p3.update(predataTwo.VarType);
                chart.appTwo.p4.update(predataTwo.NucleoEvents);
                chart.appTwo.p5.update(predataTwo.ProEvents);
            } else {
                var req = {
                    species: currentSpecies.value,
                    segment: currentSegment.value,
                    lineage: [],
                    locate: [],
                    date: []
                }
                req.lineage.push(currentLineage.value)
                req.locate.push(currentLocate.value)
                req.date.push(date.value[0].toISOString().substring(0, 10))
                req.date.push(date.value[1].toISOString().substring(0, 10))

                loading.value = true
                buttonLabel.value = "Loading"
                axios.post('http://www.zhanglabtools.online/api/classes/', req)
                    .then(request => {
                        chart.appTwo.p1.update(request.data.MutPerSample);
                        chart.appTwo.p2.update(request.data.VarClasses);
                        chart.appTwo.p3.update(request.data.VarType);
                        chart.appTwo.p4.update(request.data.NucleoEvents);
                        chart.appTwo.p5.update(request.data.ProEvents);

                        loading.value = false
                        buttonLabel.value = "Submit"
                    })
                    .catch(function (error) {
                        console.log(error)

                        loading.value = false
                        buttonLabel.value = "Submit"
                    })
            }
        }

        function singleGene() {
            if (!chart.hasOwnProperty('appThree')) {
                chart.appThree = {}

                var margin = { top: 40, right: 40, bottom: 90, left: 80 },
                    width = 880 - margin.left - margin.right,
                    height = 600 - margin.top - margin.bottom,
                    padding = 40;

                let barPlotFactory = new plotHandlerFactory(barinit, barx, bary, barplot);
                let scatterPlotFactory = new plotHandlerFactory(scatterinit, scatterx, scattery, scatterplot);

                var title = "Most mutated variant for " + currentSpecies.value,
                    xtitle = "",
                    ytitle = "mutation counts";
                chart.appThree.p1 = barPlotFactory.getPlotHandler('#a3p1', margin, width, height, padding, title, xtitle, ytitle, 'Mutation', 'Occ');

                title = "";
                ytitle = "mutation counts per base";
                xtitle = "Genes in " + currentSpecies.value + " genome";
                chart.appThree.p3 = barPlotFactory.getPlotHandler('#a3p3', margin, width, height, padding, title, xtitle, ytitle, 'Protein', 'MutationRate');
                chart.appThree.p3.xyloc = chart.appThree.p3.xyloc - 30;
                chart.appThree.p3.yxloc = chart.appThree.p3.yxloc - 10;
                chart.appThree.p3.yyloc = chart.appThree.p3.yyloc + 20;

                title = currentProtein.value + " mutation count (total samples: " + predataThree.total + " )";
                ytitle = "log10(count)";
                xtitle = currentSpecies.value + " genome position"

                chart.appThree.p2 = scatterPlotFactory.getPlotHandler('#a3p2', margin, width, height, padding, title, xtitle, ytitle, 'Position', 'Occ')
                chart.appThree.p2.cname = 'M_type'
                chart.appThree.p2.tfont = '18px';
                chart.appThree.p2.txloc = chart.appThree.p2.txloc - 20;
                chart.appThree.p2.tyloc = chart.appThree.p2.tyloc - 20;
                chart.appThree.p2.xxloc = chart.appThree.p2.xxloc - 20;
                chart.appThree.p2.xyloc = chart.appThree.p2.xyloc - 20;
                chart.appThree.p2.yxloc = chart.appThree.p2.yxloc - 20;
                chart.appThree.p2.yyloc = chart.appThree.p2.yyloc - 20;

                chart.appThree.p1.update(predataThree.proteinBar);
                chart.appThree.p2.update(predataThree.proteinCount);
                chart.appThree.p3.update(predataThree.mutationRate);
            } else {
                var req = {
                    species: currentSpecies.value,
                    segment: 'all',
                    lineage: [],
                    locate: [],
                    date: [],
                    mtypeNum: mtypeNum.value,
                    global: true
                }
                req.lineage.push(currentLineage.value)
                req.locate.push(currentLocate.value)
                req.date.push(date.value[0].toISOString().substring(0, 10))
                req.date.push(date.value[1].toISOString().substring(0, 10))

                if (geneCheck.value) {
                    req['custom'] = true;
                    req['genomerange'] = []
                    req.genomerange.push(genomeLeft.value)
                    req.genomerange.push(genomeRight.value)
                } else {
                    req['custom'] = false;
                    req['protein'] = currentProtein.value
                }

                req.global = !globalCheck(req, oldReq)

                loading.value = true
                buttonLabel.value = "Loading"
                axios.post('http://www.zhanglabtools.online/api/single/', req)
                    .then(request => {
                        request.data.proteinCount.data.forEach((element) => {
                            element.Occ = Math.log10(element.proOcc)
                        })

                        chart.appThree.p1.title = "Most mutated variant for " + currentProtein.value + " gene";
                        chart.appThree.p2.title = currentProtein.value + " mutation count (total samples: " + request.data.total + " )";
                        chart.appThree.p2.xtitle = currentSpecies.value + " genome position";
                        chart.appThree.p1.update(request.data.proteinBar);
                        chart.appThree.p2.update(request.data.proteinCount);

                        if (req['global']) {
                            chart.appThree.p3.xtitle = "Genes in " + currentSpecies.value + " genome";
                            chart.appThree.p3.update(request.data.mutationRate);
                        }

                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })
                    .catch(function (error) {
                        console.log(error)

                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })

                oldReq = JSON.parse(JSON.stringify(req))
            }
        }

        function globalProfile() {
            if (!chart.hasOwnProperty('appFour')) {
                chart.appFour = {}

                var margin = { top: 40, right: 40, bottom: 90, left: 80 },
                    width = 880 - margin.left - margin.right,
                    height = 600 - margin.top - margin.bottom,
                    padding = 40;

                let scatterPlotFactory = new plotHandlerFactory(scatterinit, scatterx, scattery, scatterplot);
                let barPlotFactory = new plotHandlerFactory(barinit, barx, bary, barplot);

                var title = "Most frequent events for " + currentProtein.value + " protein",
                    xtitle = "",
                    ytitle = "number of samples";
                chart.appFour.p1 = barPlotFactory.getPlotHandler('#a4p1', margin, width, height, padding, title, xtitle, ytitle, 'Mutation', 'Occ');

                title = currentProtein.value + " mutation count (total sample : " + predataFour.total + " )";
                ytitle = "log10(count)";
                xtitle = currentSpecies.value + " genome position"

                chart.appFour.p2 = scatterPlotFactory.getPlotHandler('#a4p2', margin, width, height, padding, title, xtitle, ytitle, 'Position', 'Occ')
                chart.appFour.p2.cname = 'pro_variant';
                chart.appFour.p2.tfont = '18px';
                chart.appFour.p2.txloc = chart.appFour.p2.txloc - 20;
                chart.appFour.p2.tyloc = chart.appFour.p2.tyloc - 20;
                chart.appFour.p2.xxloc = chart.appFour.p2.xxloc - 20;
                chart.appFour.p2.xyloc = chart.appFour.p2.xyloc - 20;
                chart.appFour.p2.yxloc = chart.appFour.p2.yxloc - 20;
                chart.appFour.p2.yyloc = chart.appFour.p2.yyloc - 20;

                chart.appFour.p1.update(predataFour.proEvents);
                chart.appFour.p2.update(predataFour.proteinProfile);
            } else {
                var req = {
                    species: currentSpecies.value,
                    protein: currentProtein.value,
                    segment: 'all',
                    lineage: [],
                    locate: [],
                    date: [],
                    ptypeNum: ptypeNum.value,
                }
                req.lineage.push(currentLineage.value)
                req.locate.push(currentLocate.value)
                req.date.push(date.value[0].toISOString().substring(0, 10))
                req.date.push(date.value[1].toISOString().substring(0, 10))

                loading.value = true
                buttonLabel.value = "Loading"
                axios.post('http://www.zhanglabtools.online/api/global/', req)
                    .then(request => {
                        request.data.proteinProfile.data.forEach((element) => {
                            element.Occ = Math.log10(element.proOcc);
                        })

                        chart.appFour.p1.title = "Most frequent events for " + currentProtein.value + " protein";
                        chart.appFour.p2.title = currentProtein.value + " mutation count (total sample : " + request.data.total + " )";
                        chart.appFour.p2.xtitle = currentSpecies.value + " genome position";
                        chart.appFour.p1.update(request.data.proEvents);
                        chart.appFour.p2.update(request.data.proteinProfile);

                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })
                    .catch(function (err) {
                        console.log(err)

                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })
            }
        }

        function mutationIntersection() {
            if (!chart.hasOwnProperty('appFive')) {
                chart.appFive = {}

                var margin = { top: 20, right: 0, bottom: 0, left: 5 },
                    width = 880 - margin.left - margin.right,
                    height = 600 - margin.top - margin.bottom,
                    padding = 40;

                let upsetPlotFactory = new plotHandlerFactory(upsetinit, upsetx, upsety, upsetplot);
                let vennPlotFactory = new plotHandlerFactory(venninit, vennx, venny, vennplot);

                var title = '',
                    xtitle = '',
                    ytitle = '';
                chart.appFive.p1 = upsetPlotFactory.getPlotHandler('#a5p1', margin, width, height, padding, title, xtitle, ytitle, '', '');
                chart.appFive.p2 = vennPlotFactory.getPlotHandler('#a5p2', margin, width, height, padding, title, xtitle, ytitle, '', '');
                chart.appFive.p1.update(predataFive.upset);
                chart.appFive.p2.update(predataFive.venn);
            } else {
                var req = {
                    species: currentSpecies.value,
                    segment: 'all',
                    protein: currentProtein.value,
                    lineage: [],
                    locate: [],
                    date: [],
                    muts: mutationText.value.split(','),
                    ctypeNum: ctypeNum.value,
                }
                req.lineage.push(currentLineage.value)
                req.locate.push(currentLocate.value)
                req.date.push(date.value[0].toISOString().substring(0, 10))
                req.date.push(date.value[1].toISOString().substring(0, 10))

                loading.value = true
                buttonLabel.value = "Loading"
                axios.post('http://www.zhanglabtools.online/api/upset/', req)
                    .then(request => {
                        chart.appFive.p1.update(request.data.upset);
                        if (request.data.venn.labels.length != 0) {
                            chart.appFive.p2.update(request.data.venn);
                        }

                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })
                    .catch(function (err) {
                        console.log(err);

                        loading.value = false;
                        buttonLabel.value = "Submit";
                    })
            }
        }

        function primerDesign() {
            var req = {
                custom: seqCheck.value,
                rerun: reRun.value,
                range: rangeCheck.value,
                species: currentSpecies.value,
                protein: currentProtein.value,
                particles: pnum.value,
                iternum: inum.value,
                phi1: phi1.value,
                phi2: phi2.value,
                rerun: reRun.value,
                primerMaxT : primerMaxT.value,
                primerMinT : primerMinT.value,
                primerTDiff : primerTDiff.value,
                primerMaxGC : primerMaxGC.value,
                primerMinGC : primerMinGC.value,
                primerGCDiff : primerGCDiff.value,
                primerMaxP : primerMaxP.value,
                primerMinP : primerMinP.value,
                primerMaxL : primerMaxL.value,
                primerMinL : primerMinL.value,
                primerLDiff : primerLDiff.value,
                temparature : temparature.value,
                primerConc : primerConc.value,
                naConc : naConc.value,
                probeMaxT : probeMaxT.value,
                probeMinT : probeMinT.value,
                probeMaxGC : probeMaxGC.value,
                probeMinGC : probeMinGC.value,
                probeMaxL : probeMaxL.value,
                probeMinL : probeMinL.value,
                probeConc: probeConc.value,
                lineage: [],
                locate: [],
                date: []
            }

            if (req.custom) {
                req.template = pcrTemplate.value
            } else {
                req.species = currentSpecies.value
                req.lineage.push(currentLineage.value)
                req.locate.push(currentLocate.value)
                req.date.push(date.value[0].toISOString().substring(0, 10))
                req.date.push(date.value[1].toISOString().substring(0, 10))
                if (req.range) {
                    req.segment = currentSegment.value
                    req.genomerange = []
                    req.genomerange.push(genomeLeft.value)
                    req.genomerange.push(genomeRight.value)
                } else {
                    req.protein = currentProtein.value
                }
            }

            loading.value = true
            buttonLabel.value = "Loading"
            axios.post('http://www.zhanglabtools.online/api/pcr/', req)
                .then(response => {
                    response.data.forEach((element) => {
                        element.coverage = Math.round(element.coverage * 1000) / 1000
                        element.forward_tm = Math.round(element.forward_tm * 1000) / 1000
                        element.forward_gc = Math.round(element.forward_gc * 1000) / 1000
                        element.forward_deltaG = Math.round(element.forward_deltaG * 1000) / 1000
                        element.forward_dimer = Math.round(element.forward_dimer * 1000) / 1000
                        element.forward_hairpin = Math.round(element.forward_hairpin * 1000) / 1000
                        element.reverse_tm = Math.round(element.reverse_tm * 1000) / 1000
                        element.reverse_gc = Math.round(element.reverse_gc * 1000) / 1000
                        element.reverse_deltaG = Math.round(element.reverse_deltaG * 1000) / 1000
                        element.reverse_dimer = Math.round(element.reverse_dimer * 1000) / 1000
                        element.reverse_hairpin = Math.round(element.reverse_hairpin * 1000) / 1000
                        element.tm_difference = Math.round(element.tm_difference * 1000) / 1000
                        element.gc_difference = Math.round(element.gc_difference * 1000) / 1000
                        element.cross_dimer = Math.round(element.cross_dimer * 1000) / 1000
                        element.probe_tm = Math.round(element.probe_tm * 1000) / 1000
                        element.probe_gc = Math.round(element.probe_gc * 1000) / 1000
                        element.probe_deltaG = Math.round(element.probe_deltaG * 1000) / 1000
                    })

                    assays.value = response.data

                    document.querySelector('table').classList.add("table");
                    document.querySelector('table').classList.add("table-striped");

                    loading.value = false;
                    buttonLabel.value = "Submit";
                })
                .catch(function (err) {
                    console.log(err);

                    loading.value = false;
                    buttonLabel.value = "Submit";
                })
        }

        function downloadAssays() {
            downFile(toCSV(assays.value), "Assays.csv", "text/plain");
        }

        function exitApp() {
            oldReq = null
            activatingApp.value = 'home'
        }

        return {
            segment,
            loading,
            seqCheck,
            rangeCheck,
            geneCheck,
            reRun,
            activatingApp,
            hoverTarget,
            buttonLabel,
            exitHover,
            currentSpecies,
            currentSegment,
            currentLineage,
            currentLocate,
            currentProtein,
            date,
            assays,
            mutationText,
            genomeLeft,
            genomeRight,
            genomeMax,
            mtypeNum,
            ptypeNum,
            ctypeNum,
            pnum,
            inum,
            phi1,
            phi2,
            primerMaxT,
            primerMinT,
            primerTDiff,
            primerMaxGC,
            primerMinGC,
            primerGCDiff,
            primerMaxP,
            primerMinP,
            primerMaxL,
            primerMinL,
            primerLDiff,
            temparature,
            primerConc,
            naConc,
            probeMaxT,
            probeMinT,
            probeMaxGC,
            probeMinGC,
            probeMaxL,
            probeMinL,
            probeConc,
            pcrTemplate,
            speciesList,
            segmentList,
            lineageList,
            locateList,
            proteinList,
            getSegmentList,
            clickAppCard,
            hoverIn,
            hoverOut,
            exitIn,
            exitOut,
            clickSideApp,
            segmentChange,
            clickSubmit,
            downloadAssays,
            exitApp
        }
    }
})

app.use(primevue.config.default);
app.component('p-datatable', primevue.datatable);
app.component('p-column', primevue.column);

app.mount('#main')